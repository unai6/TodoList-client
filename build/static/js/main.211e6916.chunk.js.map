{"version":3,"sources":["api/api.js","api/apiCalls.js","Components/NewTask.js","Components/Dashboard.js","Components/Home.js","auth/authContext.js","Components/Login.js","Components/Signup.js","auth/authReducer.js","constants/index.js","auth/authState.js","Routes/AnonRoute.jsx","Routes/PrivateRoute.jsx","config/token.js","Components/PendingTasks.js","Components/CompletedTasks.js","Components/Nav.js","Components/SideBar.js","Components/ImportantTasks.js","Routes/BrowserRoutes.js","App.js","serviceWorker.js","index.js"],"names":["axiosInstance","axios","create","baseURL","process","signUpWithGoogle","data","post","signup","getUserTasks","userId","get","createTask","id","deleteTask","taskId","editTask","registerLocale","es","NewTask","props","setDefaultLocale","useState","Date","startDate","setStartDate","history","useHistory","useForm","register","handleSubmit","errors","setisLoading","error","setError","categoryMap","map","doc","key","value","isMobile","window","innerWidth","onSubmit","a","match","params","push","className","to","name","type","placeholder","ref","required","taskDay","timeCaption","timeFormat","timeIntervals","showTimeSelect","dateFormat","locale","selected","onChange","date","category","description","Dashboard","isOpen","setIsOpen","setData","userTasks","setUserTasks","activeItem","setActiveItem","infoSent","setInfoSent","isLoading","setIsLoading","handler","setHandler","handleTrueOrFalse","useEffect","result","tasks","getDashboard","editTaskHandler","_id","document","location","reload","deleteTaskHandler","console","log","data-test","color","height","width","task","index","onClick","showModal","completed","important","importantes","format","Modal","show","onHide","Body","message","defaultValue","popperPlacement","nickName","htmlFor","Home","currentUserId","user","localStorage","getItem","JSON","parse","responseGoogle","setItem","token","stringify","clientId","buttonText","onSuccess","onFailure","redirectUri","authContext","createContext","Login","authenticate","useContext","AuthContext","Signup","email","pattern","password","state","action","payload","loading","removeItem","AuthState","initialState","useReducer","AuthReducer","dispatch","Provider","login","then","res","catch","err","children","AnonRoute","Component","component","rest","render","PrivateRoute","tokenAuth","defaults","headers","common","PendingTasks","CompletedTasks","Nav","given_name","SideBar","menuOpen","setMenuOpen","closeMenuHandler","onStateChange","handleStateChange","disableCloseOnEsc","disableAutoFocus","customBurgerIcon","onClickCapture","ImportantTasks","BrowserRoutes","path","exact","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","ReactDOM","StrictMode","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.211e6916.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const axiosInstance = axios.create({\r\n\tbaseURL:`${process.env.REACT_APP_API_URI}`,\r\n\r\n});\r\n\r\n// axiosInstance.interceptors.response.use(response => {\r\n\r\n// \treturn response.data;\r\n// }, error => {\r\n// \treturn Promise.reject(error);\r\n// });","import {axiosInstance} from './api'\r\n\r\n//userCalls\r\n\r\nexport const signUpWithGoogle = (data) => {\r\n    return axiosInstance.post('/google-signup', data)\r\n}\r\n\r\nexport const signup = (data) => {\r\n    return axiosInstance.post('/signup', data);\r\n};\r\n\r\nexport const login = (data) => {\r\n    return axiosInstance.post('/login', data);\r\n};\r\n\r\nexport const getDashboard = (userId, token) => {\r\n    return axiosInstance.get(`/dashboard/${userId}`, { headers: { Authorization: token }});\r\n};\r\n\r\nexport const getUserData = (userId) => {\r\n    return axiosInstance.get(`/userinfo/${userId}`)\r\n}\r\n\r\nexport const getUserTasks = (userId) => {\r\n    return axiosInstance.get(`/${userId}/alltasks`)\r\n}\r\n\r\n//TaskCalls\r\n\r\nexport const createTask = (id, data) => {\r\n    return axiosInstance.post(`/create-task/${id}`, data);\r\n};\r\n\r\nexport const deleteTask = (userId, taskId, data) => {\r\n    return axiosInstance.post(`/delete-task/${userId}/${taskId}`, data);\r\n};\r\n\r\nexport const editTask = (userId, taskId, data) => {\r\n    return axiosInstance.post(`/edit-task/${userId}/${taskId}`, data)\r\n}","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport '../CSS/create-task.css';\r\nimport { createTask } from '../api/apiCalls';\r\n// import Select from 'react-select';\r\nimport DatePicker, { registerLocale, setDefaultLocale} from \"react-datepicker\"; \r\nimport  \"react-datepicker/dist/react-datepicker.css\";\r\nimport es from 'date-fns/locale/es';\r\nregisterLocale(\"es\", es);\r\n\r\nexport const NewTask = (props) => {\r\n    setDefaultLocale('es')\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const history = useHistory();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [, setisLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const category = ['SuperMercado', 'Trabajo', 'Otros'];\r\n    const categoryMap = category.map((doc, key) => { return <option key={key} value={doc}>{doc}</option> });\r\n    const isMobile = window.innerWidth < 768 \r\n\r\n\r\n    const onSubmit = async data => {\r\n        try {\r\n            await createTask(props.match.params.userId, data);\r\n            setisLoading(false);\r\n            history.push(`/dashboard/${props.match.params.userId}`)\r\n\r\n\r\n        } catch (error) {\r\n            setError('ya existe un usuario con ese avatar')\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className='bg-component'>\r\n            <Link to={`/dashboard/${props.match.params.userId}`}><button className='btn-create-task position-absolute'> {'< ATRÁS'}</button></Link>\r\n            <div className='div-createTask'>\r\n                <h4 className='h4-newTask'>Crea tu nueva tarea</h4>\r\n                <form className='form-newTask' onSubmit={handleSubmit(onSubmit)}>\r\n                    {errors.name && <span className='text-danger'> Este campo es obligatorio </span>}\r\n                    <span>{error}</span>\r\n                    <label className={isMobile ? 'text-info font-weight-bold mt-2' : 'text-white font-weight-bold mt-2'}>Nombre</label>\r\n                    <input\r\n                        className='form-control'\r\n                        name='name'\r\n                        type='text'\r\n                        placeholder='Nombre'\r\n                        ref={register({ required: true })}\r\n                    />\r\n\r\n                    {errors.taskDay && <span className='text-danger'> Este campo es obligatorio </span>}\r\n                    <span>{error}</span>\r\n                    <label className={isMobile ? 'text-info font-weight-bold mt-2' : 'text-white font-weight-bold mt-2'}>Fecha</label> <br/>\r\n                    <DatePicker \r\n                                timeCaption=\"time\"\r\n                                timeFormat=\"HH:mm\" \r\n                                timeIntervals={5}\r\n                                showTimeSelect  \r\n                                dateFormat=\"dd/MM/yyyy HH:mm aa\" \r\n                                name='taskDay' \r\n                                className='form-control' \r\n                                locale=\"es\" \r\n                                selected={startDate} \r\n                                onChange={date => setStartDate(date)} \r\n\r\n                                />\r\n                    <input name='taskDay' type='hidden' value={startDate} ref={register({ required: true })} />\r\n\r\n                    {errors.category && <span className='text-danger'>Este campo es obligatorio </span>}\r\n                    <div>\r\n                        <label className={isMobile ? 'text-info font-weight-bold mt-2' : 'text-white font-weight-bold mt-2'}>\r\n                            <b>Categoría</b>\r\n                            <select\r\n                                name='category'\r\n                                className='form-control'\r\n                                ref={register({ required: true })}\r\n                            >\r\n                                <option value=''>Seleccionar</option>\r\n                                {categoryMap}\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n                    {errors.description && <span className='text-danger'> Este campo es obligatorio </span>}\r\n                    <textarea\r\n                        className='form-control'\r\n                        name='description'\r\n                        type='text'\r\n                        ref={register({ required: true })}\r\n                        placeholder='Descripción'\r\n                    />\r\n\r\n                    <button className='btn-newTask-short'>Crear tarea</button>\r\n                </form>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserData, editTask, deleteTask } from '../api/apiCalls';\r\nimport { Link } from 'react-router-dom'\r\nimport Moment from 'react-moment';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport DatePicker, { registerLocale, setDefaultLocale } from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport es from 'date-fns/locale/es';\r\nimport Loader from 'react-loader-spinner';\r\nregisterLocale(\"es\", es);\r\n\r\nconst Dashboard = (props) => {\r\n    setDefaultLocale('es')\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n    const [activeItem, setActiveItem] = useState('');\r\n    const [error, setError] = useState('')\r\n    const [infoSent, setInfoSent] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    // const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    // const categoryMap = category.map(category => category);\r\n    // const handleCategory = () => { setCategory(categoryMap) }\r\n    const [handler, setHandler] = useState(false);\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTrueOrFalse = () => setHandler(!handler);\r\n\r\n    const showModal = (task) => {\r\n        setIsOpen(true);\r\n        setActiveItem(task)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserData(props.match.params.userId);\r\n            if(result) setIsLoading(false);\r\n            else setIsLoading(true);\r\n\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n    const editTaskHandler = async (data) => {\r\n        try {\r\n            await editTask(props.match.params.userId, activeItem._id, data)\r\n            setInfoSent(!infoSent)\r\n            document.location.reload()\r\n        } catch (error) {\r\n            setError('Lo sentimos, No se puede actualizar esta tarea')\r\n        }\r\n\r\n    }\r\n    const deleteTaskHandler = async (data) => {\r\n        try {\r\n            await deleteTask(props.match.params.userId, activeItem._id, data)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            {\r\n                isLoading ?\r\n                    <div className='d-flex justify-content-center h-75 align-items-center' >\r\n                        <Loader type=\"TailSpin\" color=\"white\" height={140} width={140} />\r\n                    </div>\r\n                    :\r\n\r\n                    <>\r\n                        <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n                        <div className='div-tasks'>\r\n                            <div className='d-flex justify-content-between mb-3'>\r\n                                <span className='tasks-headers'>ÚLTIMAS TAREAS</span>\r\n                                <span className='tasks-headers creation-date'>FECHA</span>\r\n                            </div>\r\n                            {\r\n\r\n                                userTasks.map((task, index) => {\r\n\r\n                                    return (\r\n                                        <div key={index} className='d-flex justify-content-between'>\r\n                                            <div className='task-name p-2' onClick={() => showModal(task)} > {\r\n                                                task.completed ?\r\n                                                    <del>\r\n                                                        <span className=\r\n                                                            {\r\n                                                                !task.completed ?\r\n                                                                    'text-danger' :\r\n                                                                    task.completed ?\r\n                                                                        'text-success' :\r\n                                                                        (task.category === 'Trabajo' || task.category === 'Supermercado') && task.important && !task.completed ?\r\n                                                                            'text-info' :\r\n                                                                            task.category && !task.important && !task.completed === 'Supermercado' ?\r\n                                                                                'text-dark' :\r\n                                                                                null\r\n                                                            }>\r\n                                                            {task.name}\r\n                                                        </span>\r\n                                                    </del>\r\n                                                    :\r\n                                                    <span className=\r\n                                                        {\r\n                                                            !task.completed ?\r\n                                                                'text-danger' :\r\n                                                                task.completed ?\r\n                                                                    'text-success' :\r\n                                                                    (task.category === 'Trabajo' || task.category === 'Supermercado') && !task.important ?\r\n                                                                        'text-info' :\r\n                                                                        task.category && !task.importantes === 'Supermercado' ?\r\n                                                                            'text-dark' :\r\n                                                                            null\r\n                                                        }>\r\n                                                        {task.name}\r\n                                                    </span>\r\n                                            }\r\n                                                <span className={\r\n                                                    !task.completed ?\r\n                                                        'text-danger taskBall-1' :\r\n                                                        task.completed ?\r\n                                                            'text-success taskBall-1' :\r\n                                                            (task.category === 'Trabajo' || task.category === 'Supermercado' || task.category === 'Otros') && !task.important ?\r\n                                                                'text-warning taskBall-1' :\r\n                                                                task.category && !task.important === 'Supermercado' ?\r\n                                                                    'text-dark taskBall-1' :\r\n                                                                    null\r\n                                                }>\r\n                                                    {<i className=\"fas fa-circle ball-state\"></i>}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    task.important ?\r\n                                                        'text-warning' :\r\n                                                        'text-dark'\r\n                                                }>\r\n                                                    {<i className=\"fas fa-circle ball-state\"></i>}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className='date'><Moment format=\"D MMM HH:mm \">{task.taskDay}</Moment></span>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                          \r\n                        </div>\r\n                        {\r\n                            activeItem ?\r\n                                <Modal show={isOpen} onHide={hideModal}>\r\n                                    <Modal.Body>\r\n                                        <form onSubmit={handleSubmit(editTaskHandler)}>\r\n                                            {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                                            <span>{error}</span>\r\n                                            <label className='text-info font-weight-bold '>Nombre</label>\r\n                                            <input\r\n                                                defaultValue={activeItem.name}\r\n                                                className='form-control'\r\n                                                name='name'\r\n                                                type='text'\r\n                                                placeholder='Nombre'\r\n                                                ref={register}\r\n                                            />\r\n\r\n                                            {errors.taskDay && <span> {errors.taskDay.message ? errors.name.message : 'Este campo es obligatorio'} </span>}<br />\r\n                                            <span>{error}</span>\r\n                                            <label className='text-info'><b>Fecha</b></label><br />\r\n                                            <DatePicker\r\n                                                popperPlacement=\"top-left\"\r\n                                                timeCaption=\"time\"\r\n                                                timeFormat=\"HH:mm\"\r\n                                                timeIntervals={5}\r\n                                                showTimeSelect\r\n                                                dateFormat=\"dd/MM/yyyy HH:mm aa\"\r\n                                                name='taskDay'\r\n                                                className='form-control'\r\n                                                locale=\"es\"\r\n                                                selected={startDate}\r\n                                                onChange={date => setStartDate(date)}\r\n\r\n                                            />\r\n                                            <input name='taskDay' type='hidden' value={startDate} ref={register({ required: true })} />\r\n\r\n                                            {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                                            <div>\r\n                                                <label className='text-info font-weight-bold '>\r\n                                                    Categoría\r\n                                            <input\r\n                                                        className='form-control'\r\n                                                        type='text'\r\n                                                        name='category'\r\n                                                        defaultValue={activeItem.category}\r\n                                                        ref={register}\r\n                                                    />\r\n                                                    {/* <select\r\n                                                name='category'\r\n                                                className='form-control'\r\n                                                ref={register({required:true})}\r\n                                                onChange={e => handleCategory(e)}\r\n                                            >\r\n                                                {\r\n                                                    categoryMap.map((doc, key) => {\r\n                                                        return <option key={key} value={doc}>{doc}</option>;\r\n                                                    })\r\n\r\n                                                }\r\n                                            </select> */}\r\n                                                </label>\r\n                                            </div>\r\n                                            {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                                            <label className='text-info font-weight-bold '>Descripción</label>\r\n                                            <textarea\r\n                                                className='form-control'\r\n                                                name='description'\r\n                                                type='text'\r\n                                                ref={register}\r\n                                                placeholder='Descripción'\r\n                                                defaultValue={activeItem.description}\r\n                                            />\r\n\r\n\r\n                                            <div className=\"switch-button\">\r\n                                                <label className='text-info font-weight-bold '>Estado de la tarea</label>\r\n                                                <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label\" name=\"completed\" onClick={handleTrueOrFalse} ref={register} />\r\n                                                <label htmlFor=\"switch-label\" className=\"switch-button__label\"></label>\r\n                                            </div>\r\n                                            <div className=\"switch-button\">\r\n                                                <label className='text-info font-weight-bold '>Marcar como importante</label>\r\n                                                <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label-2\" name=\"important\" onClick={handleTrueOrFalse} ref={register} />\r\n                                                <label htmlFor=\"switch-label-2\" className=\"switch-button__label\"></label>\r\n                                            </div>\r\n                                            {\r\n                                                infoSent\r\n                                                    ?\r\n                                                    <p className='font-weight-bold text-success'>¡Tarea Actualizada!</p>\r\n                                                    :\r\n                                                    <div className='d-flex justify-content-center mt-4'>\r\n                                                        <button className='btn btn-info mr-2'>Actualizar</button>\r\n                                                        <button className='btn btn-danger ml-2' onClick={deleteTaskHandler}>Eliminar</button>\r\n                                                    </div>\r\n                                            }\r\n                                        </form>\r\n                                    </Modal.Body>\r\n                                </Modal>\r\n                                :\r\n                                null\r\n                        }\r\n                    </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard","    import React, {useState} from 'react'\r\n    import '../CSS/home.css';\r\n    import { Link } from 'react-router-dom';\r\n    import { signUpWithGoogle } from '../api/apiCalls';\r\n    import { GoogleLogin } from 'react-google-login';\r\n    import { useHistory } from 'react-router-dom'\r\n    import Loader from 'react-loader-spinner';\r\n    \r\n    export const Home = () => {\r\n        const [isLoading, setIsLoading] =  useState(false);\r\n        const history = useHistory()\r\n        const CLIENT_ID = '897202844317-e4dqh3eifnft6p47olbqfkm0iv5fu9k2.apps.googleusercontent.com'\r\n        let user = localStorage.getItem('user');\r\n        let currentUserId;\r\n\r\n        if (user !== null) {\r\n            currentUserId = JSON.parse(user)\r\n\r\n        }\r\n\r\n        const responseGoogle = async (data) => {\r\n            try {\r\n                setIsLoading(true)\r\n                const result = await signUpWithGoogle(data);\r\n\r\n                localStorage.setItem('token', result.data.token)\r\n                localStorage.setItem('user', JSON.stringify(result.data.user))\r\n                history.push(`/dashboard/${result.data.user._id}`)\r\n                document.location.reload()\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div className='background-home d-flex flex-column justify-content-center mx-auto'>\r\n                <div id='wave'></div>\r\n\r\n                {\r\n                    !isLoading ? \r\n                    <div className=' w-50 align-self-center d-flex flex-column justify-content-center mx-auto'>\r\n                    <Link to='/signup' ><button className='btn btn-info p-2 mb-3'>Registrarse</button></Link>\r\n                    <>\r\n                        {\r\n                            user ?\r\n\r\n                                <Link to={`/dashboard/${currentUserId.userId}`} ><button className='btn btn-info p-2 mb-3'>Ir a mi escritorio</button> </Link>\r\n\r\n                                :\r\n                                <Link to='/login' ><button className='btn btn-info p-2 mb-3'>Iniciar Sesión</button> </Link>\r\n\r\n                        }\r\n                    </>\r\n                    <GoogleLogin\r\n                        clientId={CLIENT_ID}\r\n                        buttonText=\"Registrarse con Google\"\r\n                        onSuccess={responseGoogle}\r\n                        onFailure={responseGoogle}\r\n                        redirectUri={'https://todo.unaigo.com'}\r\n                        className='w-100 text-center'\r\n                    />\r\n\r\n                </div>\r\n                :\r\n                <Loader type=\"TailSpin\" color=\"#00BFFF\" className='d-block mx-auto' height={150} width={150} />\r\n                }\r\n                \r\n                <div id='wave2'></div>        \r\n            </div>\r\n        )\r\n    }\r\n","  \r\nimport { createContext } from 'react';\r\n\r\nconst authContext = createContext();\r\n\r\nexport default authContext;","import React, { useContext, useState } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { useForm} from \"react-hook-form\";\r\nimport AuthContext from '../auth/authContext';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nexport const Login = () => {\r\n    const [isLoading, setIsLoading] =  useState(false);\r\n    const { register, handleSubmit } = useForm();\r\n    const authContext = useContext(AuthContext);\r\n    const { authenticate } = authContext;\r\n    // const [isLoading, setisLoading] = useState(true)\r\n    // const [error, setError] = useState(false)\r\n\r\n    const onSubmit = async data => {\r\n        setIsLoading(true)\r\n       await authenticate(data)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n        <Link to={`/`} className='text-info ml-3'>{'< Atrás'}</Link> \r\n        <h3 className='text-info text-center mt-4'>Entrar en mi cuenta</h3>\r\n            <form className='w-50 mx-auto mt-5' onSubmit={handleSubmit(onSubmit)}>\r\n                <input\r\n                    className='form-control mb-2'\r\n                    name='email'\r\n                    type='text'\r\n                    placeholder='email'\r\n                    ref={register({ required: true })}\r\n                />\r\n                <input\r\n                    className='form-control mb-2'\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='password'\r\n                    ref={register({ required: true })}\r\n                />\r\n                <input\r\n                    type='checkbox'\r\n                    name='remember'\r\n                    ref={register}\r\n                />\r\n                <span className='ml-2'>Recuérdame</span>\r\n                {\r\n                    isLoading ?\r\n                    <Loader type=\"TailSpin\" color=\"#00BFFF\" className='d-block mx-auto' height={40} width={40} />  \r\n                    :\r\n                    <button className='btn btn-info d-block mx-auto mt-3'>Acceder en mi cuenta</button>\r\n                }\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { signup } from '../api/apiCalls';\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport Loader from 'react-loader-spinner';\r\n\r\nexport const Signup = () => {\r\n    const [isLoading, setIsLoading] =  useState(false);\r\n    const history = useHistory();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [error, setError] = useState('')\r\n\r\n    const onSubmit = async data => {\r\n        try {\r\n            setIsLoading(true)\r\n            const result = await signup(data);\r\n            console.log(result)\r\n            if(!result) setIsLoading(false);\r\n            history.push('/login')\r\n        } catch (error) {\r\n            setError('ya existe un usuario con ese avatar')\r\n            setIsLoading(false)\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Link to={`/`} className='text-info ml-3'>{'< Atrás'}</Link> \r\n        <h3 className='text-info text-center mt-4'>Crea tu cuenta</h3>\r\n            <form className='w-50 mx-auto mt-5' onSubmit={handleSubmit(onSubmit)}>\r\n                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                <span>{error}</span>\r\n                <input\r\n                    className='form-control mb-2'\r\n                    name='name'\r\n                    type='text'\r\n                    placeholder='Nombre'\r\n                    ref={register({ required: true })}\r\n                />\r\n                {errors.email && <span className='text-danger'> {errors.email.message ? errors.email.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    placeholder='email'\r\n                    className={errors.email ? 'form-control signup-fields mx-auto border-danger mb-2' : 'form-control signup-fields mx-auto mb-2'}\r\n                    ref={register({\r\n                        required: true, pattern: { value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, message: 'La dirección no es válida' }\r\n                    })} />\r\n                {errors.nickName && <span> {errors.nickName.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n                <input\r\n                    className='form-control mb-2'\r\n                    name='nickName'\r\n                    type='text'\r\n                    ref={register({ required: true })}\r\n                    placeholder='Avatar'\r\n                />\r\n                {errors.password && <span> {errors.password.message ? errors.password.message : 'Este campo es obligatorio'} </span>}\r\n                <input\r\n                    className='form-control mb-2'\r\n                    name='password'\r\n                    type='text'\r\n                    ref={register({ required: true })}\r\n                    placeholder='Contraseña'\r\n                />\r\n                <input\r\n                    type='checkbox'\r\n                    name='remember'\r\n                    ref={register}\r\n                />\r\n                <span className='ml-2'>Recuérdame</span>\r\n                {\r\n                    isLoading ?\r\n                        <Loader type=\"TailSpin\" color=\"#00BFFF\" className='d-block mx-auto' height={40} width={40} />  \r\n                        :\r\n                        <button className='btn btn-info d-block mx-auto mt-3'>Registrarse</button>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import { LOGIN_SUCCESS, LOGIN_ERROR} from '../constants/index';\r\n\r\nexport default (state, action) => {\r\n\tswitch(action.type) {\r\n        case LOGIN_SUCCESS:\r\n  \r\n\t\t\tlocalStorage.setItem('token', action.payload.data.token);\r\n            localStorage.setItem('user', JSON.stringify(action.payload.data.user));\r\n        \r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoken: action.payload.token,\r\n                user: action.payload.user,\r\n\t\t\t\tloading: false\r\n            }\t\t\r\n\r\n\t\tcase LOGIN_ERROR:\r\n\t\t\tlocalStorage.removeItem('token');\r\n\t\t\tlocalStorage.removeItem('user');\r\n            \r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\ttoken: null,\r\n                    user: null,\r\n\t\t\t\t\tmessage: action.payload, \r\n                    loading: false\r\n\t\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n} \r\n\r\n    \r\n\r\n\r\n","export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useReducer } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\n\r\nimport {login} from '../api/apiCalls';\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nimport { LOGIN_SUCCESS, LOGIN_ERROR } from '../constants/index';\r\n\r\nexport const AuthState = props => {\r\n  const initialState = {\r\n    user: localStorage.getItem(\"user\"),\r\n    token: localStorage.getItem(\"token\"),\r\n    loading: true\r\n   }\r\n\r\n  const history = useHistory();\r\n  const [ state, dispatch ] = useReducer(AuthReducer, initialState);\r\n\r\n  const authenticate = (data) => {\r\n    login(data)\r\n      .then(res=> {\r\n       \r\n        dispatch({ type: LOGIN_SUCCESS, payload: res })\r\n        history.push(`/dashboard/${res.data.user.userId}`);\r\n        document.location.reload()\r\n      })\r\n      .catch(err => { \r\n        dispatch({ type: LOGIN_ERROR, payload: err }) \r\n      })\r\n  }\r\n\r\n  return(\r\n    <AuthContext.Provider\r\n      value={{ \r\n        token: state.token,\r\n        user: state.user,\r\n        loading: state.loading,\r\n        authenticate,\r\n  \r\n      }}\r\n    >\r\n    {props.children}\r\n    </AuthContext.Provider>\r\n  )\r\n}","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport AuthContext from '../auth/authContext';\r\n\r\nexport const AnonRoute = (props) => { \r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { component: Component, ...rest } = props; \r\n\r\n  return (\r\n    <>\r\n      {!authContext.token ? ( \r\n        <Route render={(props) => <Component {...props} />} {...rest} /> \r\n      ) : (\r\n        <Redirect to=\"/\" /> \r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nexport const PrivateRoute = props => {\r\n\r\n  \r\n  const { component: Component, ...rest } = props;\r\n  const token = localStorage.getItem('token');\r\n\r\n  return (\r\n    <>\r\n      { token ? (\r\n\r\n        <Route render={props => <Component {...props} />} {...rest} />\r\n      ) : (\r\n        <Redirect to=\"/\" /> \r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import {axiosInstance} from '../api/api';\r\n\r\nconst tokenAuth = token => {\r\n    if(token) {\r\n        axiosInstance.defaults.headers.common['Authorization'] =  token;\r\n    } else {\r\n        delete axiosInstance.defaults.headers.common['Authorization'] \r\n    }\r\n}\r\n\r\nexport default tokenAuth;","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserTasks, editTask, deleteTask } from '../api/apiCalls';\r\nimport { Link } from 'react-router-dom'\r\nimport Moment from 'react-moment';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport DatePicker, { registerLocale, setDefaultLocale } from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport es from 'date-fns/locale/es';\r\nregisterLocale(\"es\", es);\r\n\r\nconst PendingTasks = (props) => {\r\n    setDefaultLocale('es')\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n    const [activeItem, setActiveItem] = useState('');\r\n    const [error, setError] = useState('')\r\n    const [infoSent, setInfoSent] = useState(false);\r\n    // const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    // const categoryMap = category.map(category => category);\r\n    // const handleCategory = () => { setCategory(categoryMap) }\r\n    const [, setHandler] = useState(activeItem);\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTrueOrFalse = () => setHandler(!activeItem);\r\n\r\n    const showModal = (task) => {\r\n        setIsOpen(true);\r\n        setActiveItem(task)\r\n    };\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserTasks(props.match.params.userId);\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n\r\n    const editTaskHandler = async (data) => {\r\n        try {\r\n            await editTask(props.match.params.userId, activeItem._id, data)\r\n            setInfoSent(!infoSent)\r\n            document.location.reload()\r\n        } catch (error) {\r\n            setError('Lo sentimos, No se puede actualizar esta tarea')\r\n        }\r\n\r\n    }\r\n\r\n    const deleteTaskHandler = async (data) => {\r\n        try {\r\n            await deleteTask(props.match.params.userId, activeItem._id, data)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n            <div className='div-tasks'>\r\n                <div className='d-flex justify-content-between mb-3'>\r\n                    <span className='tasks-headers'>TAREAS <br />PENDIENTES</span>\r\n                    <span className='tasks-headers'>FECHA</span>\r\n                </div>\r\n                {\r\n\r\n                    userTasks.map((task, index) => {\r\n\r\n                        return (\r\n                            <div key={index} className='d-flex justify-content-between'>\r\n\r\n                                {\r\n                                    !task.completed ?\r\n\r\n                                        <>\r\n                                            <div className='task-name p-2' onClick={() => showModal(task)} >\r\n\r\n                                                <span className=\r\n                                                    {\r\n                                                        !task.completed ?\r\n                                                            'text-danger'\r\n                                                            :\r\n                                                            null\r\n                                                    }>\r\n                                                    {task.name}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    !task.completed ?\r\n                                                        'text-danger taskBall-1' :\r\n                                                        (task.category === 'Trabajo' || task.category === 'Supermercado' || task.category === 'Otros') && !task.important === true ?\r\n                                                            'text-warning taskBall-1' :\r\n                                                            task.category && !task.importantes === 'Supermercado' ?\r\n                                                                'text-dark taskBall-1' :\r\n                                                                null\r\n                                                }>\r\n                                                    {!task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    task.important ?\r\n                                                        'text-warning' :\r\n                                                        'text-dark'\r\n                                                }>\r\n                                                    {!task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className='date'><Moment format=\"D MMM YYYY HH:mm \">{task.taskDay}</Moment></span>\r\n\r\n                                            </div>\r\n                                        </>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n               \r\n            </div>\r\n            {\r\n                activeItem ?\r\n                    <Modal show={isOpen} onHide={hideModal}>\r\n                        <Modal.Body>\r\n                            <form onSubmit={handleSubmit(editTaskHandler)}>\r\n                                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                                <span>{error}</span>\r\n                                <label className='text-info font-weight-bold '>Nombre</label>\r\n                                <input\r\n                                    defaultValue={activeItem.name}\r\n                                    className='form-control'\r\n                                    name='name'\r\n                                    type='text'\r\n                                    placeholder='Nombre'\r\n                                    ref={register}\r\n                                />\r\n\r\n                                {errors.taskDay && <span> {errors.taskDay.message ? errors.name.message : 'Este campo es obligatorio'} </span>}<br />\r\n                                <span>{error}</span>\r\n                                <label className='text-info'><b>Fecha</b></label><br />\r\n\r\n                                <DatePicker\r\n                                    timeCaption=\"time\"\r\n                                    timeFormat=\"HH:mm\"\r\n                                    timeIntervals={5}\r\n                                    showTimeSelect\r\n                                    dateFormat=\"dd/MM/yyyy HH:mm aa\"\r\n                                    name='taskDay'\r\n                                    className='form-control'\r\n                                    locale=\"es\"\r\n                                    selected={startDate}\r\n                                    onChange={date => setStartDate(date)}\r\n\r\n                                />\r\n                                <input name='taskDay' type='hidden' value={startDate} ref={register({ required: true })} />\r\n\r\n                                {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                                <div>\r\n                                    <label className='text-info font-weight-bold '>\r\n                                        Categoría\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            name='category'\r\n                                            defaultValue={activeItem.category}\r\n                                            ref={register}\r\n                                        />\r\n                                        {/* <select\r\n                                            name='category'\r\n                                            className='form-control'\r\n                                            ref={register({required:true})}\r\n                                            onChange={e => handleCategory(e)}\r\n                                        >\r\n                                            {\r\n                                                categoryMap.map((doc, key) => {\r\n                                                    return <option key={key} value={doc}>{doc}</option>;\r\n                                                })\r\n\r\n                                            }\r\n                                        </select> */}\r\n                                    </label>\r\n                                </div>\r\n                                {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                                <label className='text-info font-weight-bold '>Descripción</label>\r\n                                <textarea\r\n                                    className='form-control'\r\n                                    name='description'\r\n                                    type='text'\r\n                                    ref={register}\r\n                                    placeholder='Descripción'\r\n                                    defaultValue={activeItem.description}\r\n                                />\r\n\r\n\r\n                                <div className=\"switch-button\">\r\n                                    <label className='text-info font-weight-bold '>Estado de la tarea</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label\" name=\"completed\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                <div className=\"switch-button\">\r\n                                    <label className='text-info font-weight-bold '>Marcar como importante</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label-2\" name=\"important\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label-2\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                {\r\n                                    infoSent\r\n                                        ?\r\n                                        <p className='font-weight-bold text-success'>¡Tarea Actualizada!</p>\r\n                                        :\r\n                                        <div className='d-flex justify-content-center mt-4'>\r\n                                            <button className='btn btn-info mr-2'>Actualizar</button>\r\n                                            <button className='btn btn-danger ml-2' onClick={deleteTaskHandler}>Eliminar</button>\r\n                                        </div>\r\n\r\n                                }\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PendingTasks","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserTasks, editTask, deleteTask } from '../api/apiCalls';\r\nimport { Link } from 'react-router-dom'\r\nimport Moment from 'react-moment';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport DatePicker, { registerLocale, setDefaultLocale} from \"react-datepicker\"; \r\nimport  \"react-datepicker/dist/react-datepicker.css\";\r\nimport es from 'date-fns/locale/es';\r\nregisterLocale(\"es\", es);\r\n\r\nconst CompletedTasks = (props) => {\r\n    setDefaultLocale('es')\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n    const [activeItem, setActiveItem] = useState('');\r\n    const [error, setError] = useState('')\r\n    const [infoSent, setInfoSent] = useState(false);\r\n    // const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    // const categoryMap = category.map(category => category);\r\n    // const handleCategory = () => { setCategory(categoryMap) }\r\n    const [handler, setHandler] = useState(false);\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTrueOrFalse = () => setHandler(!handler);\r\n\r\n    const showModal = (task) => {\r\n        setIsOpen(true);\r\n        setActiveItem(task)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserTasks(props.match.params.userId);\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n\r\n    const editTaskHandler = async (data) => {\r\n        try {\r\n            await editTask(props.match.params.userId, activeItem._id, data)\r\n            setInfoSent(!infoSent)\r\n            document.location.reload()\r\n        } catch (error) {\r\n            setError('Lo sentimos, No se puede actualizar esta tarea')\r\n        }\r\n\r\n    }\r\n\r\n    const deleteTaskHandler = async (data) => {\r\n        try {\r\n            await deleteTask(props.match.params.userId, activeItem._id, data)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n            <div className='div-tasks'>\r\n                <div className='d-flex justify-content-between mb-3'>\r\n                    <span className='tasks-headers'>TAREAS COMPLETADAS</span>\r\n                    <span className='tasks-headers'>FECHA</span>\r\n                </div>\r\n                {\r\n\r\n                    userTasks.map((task, index) => {\r\n\r\n                        return (\r\n                            <div key={index} className='d-flex justify-content-between'>\r\n\r\n                                {\r\n                                    task.completed ?\r\n\r\n                                        <>\r\n                                            <div className='task-name p-2' onClick={() => showModal(task)} >\r\n\r\n                                                <span className=\r\n                                                    {\r\n                                                        task.completed ?\r\n                                                            'text-success'\r\n                                                            :\r\n                                                            null\r\n                                                    }>\r\n                                                    <del>{task.name}</del>\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    task.completed ?\r\n                                                        'text-success taskBall-1' :\r\n                                                        (task.category === 'Trabajo' || task.category === 'Supermercado' || task.category === 'Otros') && !task.important === true ?\r\n                                                            'text-warning taskBall-1' :\r\n                                                            task.category && !task.importantes === 'Supermercado' ?\r\n                                                                'text-dark taskBall-1' :\r\n                                                                null\r\n                                                }>\r\n                                                    {task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    task.important ?\r\n                                                        'text-warning' :\r\n                                                        'text-dark'\r\n                                                }>\r\n                                                    {task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className='date'><Moment format=\"D MMM YYYY HH:mm \">{task.taskDay}</Moment></span>\r\n                                            </div>\r\n                                        </>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                {/* <div className='vertical-lign'></div> */}\r\n            </div>\r\n            {\r\n                activeItem ?\r\n                    <Modal show={isOpen} onHide={hideModal}>\r\n                        <Modal.Body>\r\n                            <form onSubmit={handleSubmit(editTaskHandler)}>\r\n                                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                                <span>{error}</span>\r\n                                <label className='text-info font-weight-bold '>Nombre</label>\r\n                                <input\r\n                                    defaultValue={activeItem.name}\r\n                                    className='form-control'\r\n                                    name='name'\r\n                                    type='text'\r\n                                    placeholder='Nombre'\r\n                                    ref={register}\r\n                                />\r\n\r\n\r\n                                {errors.taskDay && <span> {errors.taskDay.message ? errors.name.message : 'Este campo es obligatorio'} </span>}<br />\r\n                                <span>{error}</span>\r\n                                <label className='text-info'><b>Fecha</b></label><br/>\r\n                                <DatePicker \r\n                                timeCaption=\"time\"\r\n                                timeFormat=\"HH:mm\" \r\n                                timeIntervals={5}\r\n                                showTimeSelect  \r\n                                dateFormat=\"dd/MM/yyyy HH:mm aa\" \r\n                                name='taskDay' \r\n                                className='form-control' \r\n                                locale=\"es\" \r\n                                selected={startDate} \r\n                                onChange={date => setStartDate(date)} \r\n\r\n                                />\r\n                                <input name='taskDay' type='hidden' value={startDate} ref={register({ required: true })} />\r\n\r\n                                {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                                <div>\r\n                                    <label className='text-info font-weight-bold'>\r\n                                        Categoría\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            name='category'\r\n                                            defaultValue={activeItem.category}\r\n                                            ref={register}\r\n                                        />\r\n                                        {/* <select\r\n                                            name='category'\r\n                                            className='form-control'\r\n                                            ref={register({required:true})}\r\n                                            onChange={e => handleCategory(e)}\r\n                                        >\r\n                                            {\r\n                                                categoryMap.map((doc, key) => {\r\n                                                    return <option key={key} value={doc}>{doc}</option>;\r\n                                                })\r\n\r\n                                            }\r\n                                        </select> */}\r\n                                    </label>\r\n                                </div>\r\n                                {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                                <label className='text-info font-weight-bold'>Descripción</label>\r\n                                <texarea\r\n                                    className='form-control'\r\n                                    name='description'\r\n                                    type='textarea'\r\n                                    ref={register}\r\n                                    placeholder='Descripción'\r\n                                    defaultValue={activeItem.description}\r\n                                />\r\n\r\n\r\n                                <div className=\"switch-button\">\r\n                                    <label className='text-info font-weight-bold'>Estado de la tarea</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label\" name=\"completed\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                <div className=\"switch-button\">\r\n                                    <label className='text-info font-weight-bold'>Marcar como importante</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label-2\" name=\"important\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label-2\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                {\r\n                                    infoSent\r\n                                        ?\r\n                                        <p className='font-weight-bold text-success'>¡Tarea Actualizada!</p>\r\n                                        :\r\n                                        <div className='d-flex justify-content-center mt-4'>\r\n                                            <button className='btn btn-info mr-2'>Actualizar</button>\r\n                                            <button className='btn btn-danger ml-2' onClick={deleteTaskHandler}>Eliminar</button>\r\n                                        </div>\r\n                                }\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompletedTasks","import React from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { Redirect  } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n\r\n   \r\n    const user = JSON.parse(localStorage.getItem('user'))\r\n\r\n    const handleClickLogout = () => {\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n        document.location.reload()\r\n        return <Redirect to={'/'} />\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='nav-div' data-test='app-component'>\r\n            <button className='btn-logout d-block ml-auto mb-4 mr-2 mt-2' onClick={handleClickLogout}>[ Cerrar Sesión ]</button>\r\n            <h2 className='h2-name'>Hola {user.nickName? user.nickName : user.given_name}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React, { useState } from 'react';\r\nimport '../CSS/slideMenu.css';\r\nimport { slide as Menu } from \"react-burger-menu\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SideBar = () => {\r\n\r\n    const [menuOpen, setMenuOpen] = useState(true);\r\n    const user = JSON.parse(localStorage.getItem('user'))\r\n\r\n\r\n\r\n    const handleStateChange = (state) => {\r\n        setMenuOpen(state.isOpen)\r\n    }\r\n    const closeMenuHandler = () => {\r\n        setMenuOpen(!menuOpen)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Menu onStateChange={(state) => handleStateChange(state)} className='userMenu' isOpen={menuOpen} disableCloseOnEsc disableAutoFocus customBurgerIcon={<span className='btn-categories'>MENÚ</span>} >\r\n\r\n                {\r\n\r\n                    user.userId ?\r\n                        <>\r\n                            <p className='text-center'>\r\n                                <Link onClickCapture={closeMenuHandler} className=\"menu-item  bm-item btn-handler\" to={`/dashboard/${user.userId}`}>\r\n                                    INICIO\r\n                            </Link>\r\n                            </p>\r\n\r\n                            <p className='text-center'>\r\n                                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-danger font-weight-bold\" to={`/${user.userId}/pendingTasks`}>\r\n                                    PENDIENTES\r\n                            </Link>\r\n                            </p>\r\n\r\n                            <p className='text-center'>\r\n                                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-success font-weight-bold\" to={`/${user.userId}/completedTasks`}>\r\n                                    COMPLETADAS\r\n                            </Link>\r\n                            </p>\r\n\r\n                            <p className='text-center'>\r\n                                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-warning font-weight-bold\" to={`/${user.userId}/importantTasks`}>\r\n                                    IMPORTANTES\r\n                            </Link>\r\n                            </p>\r\n\r\n\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <p className='text-center'>\r\n                                <Link onClickCapture={closeMenuHandler} className=\"menu-item  bm-item btn-handler\" to={`/dashboard/${user._id}`}>\r\n                                    INICIO\r\n                            </Link>\r\n                            </p>\r\n\r\n                            <p className='text-center'>\r\n                                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-danger font-weight-bold\" to={`/${user._id}/pendingTasks`}>\r\n                                    PENDIENTES\r\n                            </Link>\r\n                            </p>\r\n\r\n                            <p className='text-center'>\r\n                                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-success font-weight-bold\" to={`/${user._id}/completedTasks`}>\r\n                                    COMPLETADAS\r\n                            </Link>\r\n                            </p>\r\n\r\n                            <p className='text-center'>\r\n                                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-warning font-weight-bold\" to={`/${user._id}/importantTasks`}>\r\n                                    IMPORTANTES\r\n                            </Link>\r\n                            </p>\r\n\r\n\r\n\r\n                        </>\r\n\r\n                }\r\n\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\nexport default SideBar","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserTasks, editTask, deleteTask } from '../api/apiCalls';\r\nimport { Link } from 'react-router-dom'\r\nimport Moment from 'react-moment';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport DatePicker, { registerLocale, setDefaultLocale} from \"react-datepicker\"; \r\nimport  \"react-datepicker/dist/react-datepicker.css\";\r\nimport es from 'date-fns/locale/es';\r\nregisterLocale(\"es\", es);\r\n\r\nconst ImportantTasks = (props) => {\r\n    setDefaultLocale('es')\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n    const [activeItem, setActiveItem] = useState('');\r\n    const [error, setError] = useState('')\r\n    const [infoSent, setInfoSent] = useState(false);\r\n    // const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    // const categoryMap = category.map(category => category);\r\n    // const handleCategory = () => { setCategory(categoryMap) }\r\n    const [handler, setHandler] = useState(false);\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTrueOrFalse = () => setHandler(!handler);\r\n\r\n    const showModal = (task) => {\r\n        setIsOpen(true);\r\n        setActiveItem(task)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserTasks(props.match.params.userId);\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n\r\n    const editTaskHandler = async (data) => {\r\n        try {\r\n            await editTask(props.match.params.userId, activeItem._id, data)\r\n            setInfoSent(!infoSent)\r\n            document.location.reload()\r\n        } catch (error) {\r\n            setError('Lo sentimos, No se puede actualizar esta tarea')\r\n        }\r\n    }\r\n    const deleteTaskHandler = async (data) => {\r\n        try {\r\n            await deleteTask(props.match.params.userId, activeItem._id, data)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n            <div className='div-tasks'>\r\n                <div className='d-flex justify-content-between mb-3'>\r\n                    <span className='tasks-headers'>TAREAS IMPORTANTES</span>\r\n                    <span className='tasks-headers'>FECHA</span>\r\n                </div>\r\n                {\r\n\r\n                    userTasks.map((task, index) => {\r\n\r\n                        return (\r\n                            <div key={index} className='d-flex justify-content-between'>\r\n\r\n                                {\r\n                                    task.important && !task.completed ?\r\n\r\n                                        <>\r\n                                            <div className='task-name p-2' onClick={() => showModal(task)} >\r\n\r\n                                                <span className=\r\n                                                    {\r\n                                                        task.important && !task.completed ?\r\n                                                            'text-warning'\r\n                                                            :\r\n                                                            null\r\n                                                    }>\r\n                                                    {task.name}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    !task.completed ?\r\n                                                        'text-danger taskBall-1' :\r\n                                                        null\r\n                                                }>\r\n                                                    {task.important && !task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    task.important ?\r\n                                                        'text-warning' :\r\n                                                        'text-dark'\r\n                                                }>\r\n                                                    {task.important ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className='date'><Moment format=\"D MMM YYYY HH:mm \">{task.taskDay}</Moment></span>\r\n                                            </div>\r\n                                        </>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                {/* <div className='vertical-lign'></div> */}\r\n            </div>\r\n            {\r\n                activeItem ?\r\n                    <Modal show={isOpen} onHide={hideModal}>\r\n                        <Modal.Body>\r\n                            <form onSubmit={handleSubmit(editTaskHandler)}>\r\n                                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                                <span>{error}</span>\r\n                                <label className='text-info font-weight-bold '>Nombre</label>\r\n                                <input\r\n                                    defaultValue={activeItem.name}\r\n                                    className='form-control'\r\n                                    name='name'\r\n                                    type='text'\r\n                                    placeholder='Nombre'\r\n                                    ref={register}\r\n                                />\r\n\r\n                                {errors.taskDay && <span> {errors.taskDay.message ? errors.name.message : 'Este campo es obligatorio'} </span>}<br />\r\n                                <span>{error}</span>\r\n                                <label className='text-info'><b>Nombre</b></label><br/>\r\n                                <DatePicker \r\n                                timeCaption=\"time\"\r\n                                timeFormat=\"HH:mm\" \r\n                                timeIntervals={5}\r\n                                showTimeSelect  \r\n                                dateFormat=\"dd/MM/yyyy HH:mm aa\" \r\n                                name='taskDay' \r\n                                className='form-control' \r\n                                locale=\"es\" \r\n                                selected={startDate} \r\n                                onChange={date => setStartDate(date)} \r\n\r\n                                />\r\n                                <input name='taskDay' type='hidden' value={startDate} ref={register({ required: true })} />\r\n\r\n                                {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                                <div>\r\n                                    <label className='text-info font-weight-bold '>\r\n                                        Categoría\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            name='category'\r\n                                            defaultValue={activeItem.category}\r\n                                            ref={register}\r\n                                        />\r\n                                        {/* <select\r\n                                            name='category'\r\n                                            className='form-control'\r\n                                            ref={register({required:true})}\r\n                                            onChange={e => handleCategory(e)}\r\n                                        >\r\n                                            {\r\n                                                categoryMap.map((doc, key) => {\r\n                                                    return <option key={key} value={doc}>{doc}</option>;\r\n                                                })\r\n\r\n                                            }\r\n                                        </select> */}\r\n                                    </label>\r\n                                </div>\r\n                                {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                                <label className='text-info font-weight-bold '>Descripción</label>\r\n                                <textarea\r\n                                    className='form-control'\r\n                                    name='description'\r\n                                    type='text'\r\n                                    ref={register}\r\n                                    placeholder='Descripción'\r\n                                    defaultValue={activeItem.description}\r\n                                />\r\n\r\n\r\n                                <div className=\"switch-button\">\r\n                                    <label className='text-info font-weight-bold '>Estado de la tarea</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label\" name=\"completed\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                <div className=\"switch-button\">\r\n                                    <label className='text-info font-weight-bold '>Marcar como importante</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label-2\" name=\"important\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label-2\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                {\r\n                                    infoSent\r\n                                        ?\r\n                                        <p className='font-weight-bold text-success'>¡Tarea Actualizada!</p>\r\n                                        :\r\n                                        <div className='d-flex justify-content-center mt-4'>\r\n                                            <button className='btn btn-info mr-2'>Actualizar</button>\r\n                                            <button className='btn btn-danger ml-2' onClick={deleteTaskHandler}>Eliminar</button>\r\n                                        </div>\r\n                                }\r\n\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImportantTasks","import React from \"react\";\r\nimport { NewTask } from '../Components/NewTask';\r\nimport Dashboard from '../Components/Dashboard';\r\nimport { Home } from '../Components/Home';\r\nimport { Login } from '../Components/Login';\r\nimport { Signup } from '../Components/Signup';\r\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport { AuthState } from \"../auth/authState\";\r\nimport { AnonRoute } from \"./AnonRoute\";\r\nimport { PrivateRoute } from \"./PrivateRoute\";\r\nimport tokenAuth from '../config/token';\r\nimport PendingTasks from \"../Components/PendingTasks\";\r\nimport CompletedTasks from \"../Components/CompletedTasks\";\r\nimport Nav from '../Components/Nav'\r\nimport SideBar from '../Components/SideBar';\r\nimport ImportantTasks from \"../Components/ImportantTasks\";\r\n\r\nexport function BrowserRoutes() {\r\n    const token = localStorage.getItem('token');\r\n    if (token) tokenAuth(token)\r\n\r\n    return (\r\n        <Router>\r\n            <AuthState>\r\n                <div>\r\n                    {\r\n                        token && <Nav /> \r\n                    }\r\n                    <div>\r\n\r\n                        {\r\n                            token && <SideBar />\r\n                        }\r\n                        <div>\r\n                            <Switch>\r\n                                <AnonRoute path=\"/\" exact component={Home} />\r\n                                <AnonRoute path=\"/signup\" component={Signup} />\r\n                                <AnonRoute path=\"/login\" component={Login} />\r\n                                <PrivateRoute path=\"/dashboard/:userId\" component={Dashboard} />\r\n                                <PrivateRoute path='/create-task/:userId' component={NewTask} />\r\n                                <PrivateRoute path='/:userId/pendingTasks' component={PendingTasks} />\r\n                                <PrivateRoute path='/:userId/completedTasks' component={CompletedTasks} />\r\n                                <PrivateRoute path='/:userId/importantTasks' component={ImportantTasks} />\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </AuthState>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default BrowserRoutes;\r\n\r\n","import React from 'react';\r\nimport { BrowserRoutes } from './Routes/BrowserRoutes';\r\nimport './CSS/home.css'\r\n\r\nexport const App = () => {\r\n\r\n  return (\r\n   <BrowserRoutes/>\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}