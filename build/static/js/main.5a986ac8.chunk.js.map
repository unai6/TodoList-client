{"version":3,"sources":["api/api.js","api/apiCalls.js","Components/NewTask.js","Components/Dashboard.js","Components/Home.js","auth/authContext.js","Components/Login.js","Components/Signup.js","auth/authReducer.js","constants/index.js","auth/authState.js","Routes/AnonRoute.jsx","Routes/PrivateRoute.jsx","config/token.js","Components/AllTasks.js","Components/PendingTasks.js","Components/CompletedTasks.js","Components/Nav.js","Components/SideBar.js","Components/ImportantTasks.js","Routes/BrowserRoutes.js","App.js","serviceWorker.js","index.js"],"names":["axiosInstance","axios","create","baseURL","process","signup","data","post","getUserTasks","userId","get","createTask","id","editTask","taskId","NewTask","props","history","useHistory","useForm","register","handleSubmit","errors","useState","setisLoading","error","setError","category","setCategory","categoryMap","map","onSubmit","a","match","params","push","className","name","message","type","placeholder","ref","required","nickName","onChange","e","doc","key","value","description","Dashboard","isOpen","setIsOpen","setData","userTasks","setUserTasks","activeItem","setActiveItem","infoSent","setInfoSent","handler","setHandler","handleTrueOrFalse","useEffect","result","tasks","getDashboard","EditProfile","_id","document","location","reload","data-test","to","task","index","onClick","showModal","completed","important","importantes","format","createdAt","Modal","show","onHide","Body","defaultValue","htmlFor","Home","currentUserId","user","localStorage","getItem","JSON","parse","authContext","createContext","Login","authenticate","useContext","AuthContext","Signup","isLoading","password","state","action","setItem","payload","token","stringify","loading","removeItem","AuthState","initialState","useReducer","AuthReducer","dispatch","Provider","login","then","res","catch","err","children","AnonRoute","Component","component","rest","render","PrivateRoute","tokenAuth","defaults","headers","common","AllTasks","PendingTasks","CompletedTasks","Nav","src","alt","SideBar","menuOpen","setMenuOpen","closeMenuHandler","onStateChange","handleStateChange","disableCloseOnEsc","disableAutoFocus","customBurgerIcon","onClickCapture","ImportantTasks","BrowserRoutes","path","exact","App","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","StrictMode","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5a986ac8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const axiosInstance = axios.create({\r\n\tbaseURL:`${process.env.REACT_APP_API_URI}`,\r\n\r\n});\r\n\r\n// axiosInstance.interceptors.response.use(response => {\r\n\r\n// \treturn response.data;\r\n// }, error => {\r\n// \treturn Promise.reject(error);\r\n// });","import {axiosInstance} from './api'\r\n\r\n//userCalls\r\n\r\nexport const signup = (data) => {\r\n    return axiosInstance.post('/signup', data);\r\n};\r\n\r\nexport const login = (data) => {\r\n    return axiosInstance.post('/login', data);\r\n};\r\n\r\nexport const getDashboard = (userId, token) => {\r\n    return axiosInstance.get(`/dashboard/${userId}`, { headers: { Authorization: token }});\r\n};\r\n\r\nexport const getUserData = (userId) => {\r\n    return axiosInstance.get(`/userinfo/${userId}`)\r\n}\r\n\r\nexport const getUserTasks = (userId) => {\r\n    return axiosInstance.get(`/${userId}/alltasks`)\r\n}\r\n\r\n//TaskCalls\r\n\r\nexport const createTask = (id, data) => {\r\n    return axiosInstance.post(`/create-task/${id}`, data);\r\n};\r\n\r\nexport const deleteTask = (userId, taskId, data) => {\r\n    return axiosInstance.post(`/delete-task/${userId}/${taskId}`, data);\r\n};\r\n\r\nexport const editTask = (userId, taskId, data) => {\r\n    return axiosInstance.post(`/edit-task/${userId}/${taskId}`, data)\r\n}","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../CSS/create-task.css';\r\nimport { createTask } from '../api/apiCalls';\r\n// import Select from 'react-select';\r\n\r\nexport const NewTask = (props) => {\r\n\r\n    const history = useHistory();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [, setisLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    const categoryMap = category.map(category => category);\r\n\r\n    const handleCategory = () => {setCategory(categoryMap)}\r\n\r\n    const onSubmit = async data => {\r\n        try {\r\n            await createTask(props.match.params.userId, data);\r\n            setisLoading(false);\r\n            history.push(`/dashboard/${props.match.params.userId.userId}`)\r\n\r\n        } catch (error) {\r\n            setError('ya existe un usuario con ese avatar')\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='bg-component'>\r\n            <div className='div-createTask'>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                    <span>{error}</span>\r\n                    <input\r\n                        className='form-control'\r\n                        name='name'\r\n                        type='text'\r\n                        placeholder='Nombre'\r\n                        ref={register({ required: true })}\r\n                    />\r\n                        {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n          \r\n                    <div>\r\n                        <label>\r\n                            Categoría\r\n                            <select\r\n                                name='category'\r\n                                className='form-control'\r\n                                ref={register({ required: true })}\r\n                                onChange={e => handleCategory(e)}\r\n                            >\r\n                                {\r\n                                    categoryMap.map((doc, key) => {\r\n                                        return <option key={key} value={doc}>{doc}</option>;\r\n                                    })\r\n\r\n                                }\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n                    {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                    <input\r\n                        className='form-control'\r\n                        name='description'\r\n                        type='text'\r\n                        ref={register({ required: true })}\r\n                        placeholder='Descripción'\r\n                    />\r\n\r\n                    <button>Crear tarea</button>\r\n                </form>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserData, editTask } from '../api/apiCalls';\r\nimport { Link } from 'react-router-dom'\r\nimport Moment from 'react-moment';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n    const [activeItem, setActiveItem] = useState('');\r\n    const [error, setError] = useState('')\r\n    const [infoSent, setInfoSent] = useState(false);\r\n    // const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    // const categoryMap = category.map(category => category);\r\n    // const handleCategory = () => { setCategory(categoryMap) }\r\n    const [handler, setHandler] = useState(false);\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTrueOrFalse = () => setHandler(!handler);\r\n\r\n    const showModal = (task) => {\r\n        setIsOpen(true);\r\n        setActiveItem(task)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserData(props.match.params.userId);\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n    const EditProfile = async (data) => {\r\n        try {\r\n            await editTask(props.match.params.userId, activeItem._id, data)\r\n            setInfoSent(!infoSent)\r\n            document.location.reload()\r\n        } catch (error) {\r\n            setError('Lo sentimos, No se puede actualizar esta tarea')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n            <div className='div-tasks'>\r\n                <div className='d-flex justify-content-between mb-3'>\r\n                    <span className='tasks-headers'>ÚLTIMAS TAREAS</span>\r\n                    <span className='tasks-headers'>FECHA DE CREACIÓN</span>\r\n                </div>\r\n                {\r\n\r\n                    userTasks.map((task, index) => {\r\n\r\n                        return (\r\n                            <div key={index} className='d-flex justify-content-between'>\r\n                                <div className='task-name p-2' onClick={() => showModal(task)} > {\r\n                                    task.completed ?\r\n                                        <del>\r\n                                            <span className=\r\n                                                {\r\n                                                    !task.completed ?\r\n                                                        'text-danger' :\r\n                                                        task.completed ?\r\n                                                            'text-success' :\r\n                                                            (task.category === 'Trabajo' || task.category === 'Supermercado') && task.important && !task.completed ?\r\n                                                                'text-info' :\r\n                                                                task.category && !task.important && !task.completed === 'Supermercado' ?\r\n                                                                    'text-dark' :\r\n                                                                    null\r\n                                                }>\r\n                                                {task.name}\r\n                                            </span>\r\n                                        </del>\r\n                                        :\r\n                                        <span className=\r\n                                            {\r\n                                                !task.completed  ?\r\n                                                    'text-danger' :\r\n                                                    task.completed ?\r\n                                                        'text-success' :\r\n                                                        (task.category === 'Trabajo' || task.category === 'Supermercado') && !task.important ?\r\n                                                            'text-info' :\r\n                                                            task.category && !task.importantes === 'Supermercado' ?\r\n                                                                'text-dark' :\r\n                                                                null\r\n                                            }>\r\n                                            {task.name}\r\n                                        </span>\r\n                                }\r\n                                    <span className={\r\n                                        !task.completed  ?\r\n                                            'text-danger taskBall-1' :\r\n                                            task.completed ?\r\n                                                'text-success taskBall-1' :\r\n                                                (task.category === 'Trabajo' || task.category === 'Supermercado' || task.category === 'Otros') && !task.important ?\r\n                                                    'text-warning taskBall-1' :\r\n                                                    task.category && !task.important === 'Supermercado' ?\r\n                                                        'text-dark taskBall-1' :\r\n                                                        null\r\n                                    }>\r\n                                        {<i className=\"fas fa-circle ball-state\"></i>}\r\n                                    </span>\r\n                                    \r\n                                    <span className={\r\n                                        task.important ?\r\n                                        'text-warning' :\r\n                                        'text-dark'\r\n                                    }>\r\n                                    {<i className=\"fas fa-circle ball-state\"></i>}\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    <span className='date'><Moment format=\"D MMM YYYY\">{task.createdAt}</Moment></span>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <div className='vertical-lign'></div>\r\n            </div>\r\n            {\r\n                activeItem ?\r\n                    <Modal show={isOpen} onHide={hideModal}>\r\n                        <Modal.Body>\r\n                            <form onSubmit={handleSubmit(EditProfile)}>\r\n                                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                                <span>{error}</span>\r\n                                <label>Nombre</label>\r\n                                <input\r\n                                    defaultValue={activeItem.name}\r\n                                    className='form-control'\r\n                                    name='name'\r\n                                    type='text'\r\n                                    placeholder='Nombre'\r\n                                    ref={register}\r\n                                />\r\n                                {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                                <div>\r\n                                    <label>\r\n                                        Categoría\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            name='category'\r\n                                            defaultValue={activeItem.category}\r\n                                            ref={register}\r\n                                        />\r\n                                        {/* <select\r\n                                            name='category'\r\n                                            className='form-control'\r\n                                            ref={register({required:true})}\r\n                                            onChange={e => handleCategory(e)}\r\n                                        >\r\n                                            {\r\n                                                categoryMap.map((doc, key) => {\r\n                                                    return <option key={key} value={doc}>{doc}</option>;\r\n                                                })\r\n\r\n                                            }\r\n                                        </select> */}\r\n                                    </label>\r\n                                </div>\r\n                                {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                                <label>Descripción</label>\r\n                                <input\r\n                                    className='form-control'\r\n                                    name='description'\r\n                                    type='text'\r\n                                    ref={register}\r\n                                    placeholder='Descripción'\r\n                                    defaultValue={activeItem.description}\r\n                                />\r\n\r\n\r\n                                <div className=\"switch-button\">\r\n                                    <label>Estado de la tarea</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label\" name=\"completed\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                <div className=\"switch-button\">\r\n                                    <label>Marcar como importante</label>\r\n                                    <input  className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label-2\" name=\"important\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label-2\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                {\r\n                                infoSent \r\n                                ?\r\n                                    <p>¡Tarea Actualizada!</p>\r\n                                :\r\n                                    <button>Actualizar</button>\r\n                                }\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard","import React from 'react'\r\nimport '../CSS/home.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport const Home = () => {\r\n    \r\n\r\n    let user = localStorage.getItem('user');\r\n    let currentUserId;\r\n\r\n    if (user !== null) {\r\n      currentUserId = JSON.parse(user)\r\n      \r\n    }\r\n\r\n    return (\r\n        <div className='background-home'>\r\n        <Link to='/signup' ><button>Registrarse</button></Link>\r\n            <>\r\n        {\r\n            user ?\r\n\r\n        <Link to={`/dashboard/${currentUserId.userId}`} ><button>Ir a mi escritorio</button> </Link>\r\n        \r\n        :\r\n        <Link to='/login' ><button>Iniciar Sesión</button> </Link>\r\n        \r\n        }\r\n        </>\r\n\r\n        </div>\r\n    )\r\n}\r\n","  \r\nimport { createContext } from 'react';\r\n\r\nconst authContext = createContext();\r\n\r\nexport default authContext;","import React, { useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport AuthContext from '../auth/authContext';\r\n\r\nexport const Login = () => {\r\n\r\n    const { register, handleSubmit } = useForm();\r\n    const authContext = useContext(AuthContext);\r\n    const { authenticate } = authContext;\r\n    // const [isLoading, setisLoading] = useState(true)\r\n    // const [error, setError] = useState(false)\r\n\r\n    const onSubmit = data => {\r\n        authenticate(data)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <input\r\n                    className='form-control'\r\n                    name='nickName'\r\n                    type='text'\r\n                    placeholder='NickName'\r\n                    ref={register({ required: true })}\r\n                />\r\n                <input\r\n                    className='form-control'\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='password'\r\n                    ref={register({ required: true })}\r\n                />\r\n                <input\r\n                    type='checkbox'\r\n                    name='remember'\r\n                    ref={register}\r\n                />\r\n                <button>Acceder en mi cuenta</button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { signup } from '../api/apiCalls';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Signup = () => {\r\n    const history = useHistory();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isLoading, setisLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n\r\n    const onSubmit = async data => {\r\n        try {\r\n            await signup(data);\r\n            setisLoading(false);\r\n            history.push('/login')\r\n\r\n        } catch (error) {\r\n            setError('ya existe un usuario con ese avatar')\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                <span>{error}</span>\r\n                <input\r\n                    className='form-control'\r\n                    name='name'\r\n                    type='text'\r\n                    placeholder='Nombre'\r\n                    ref={register({ required: true })}\r\n                />\r\n                {errors.nickName && <span> {errors.nickName.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n                <input\r\n                    className='form-control'\r\n                    name='nickName'\r\n                    type='text'\r\n                    ref={register({ required: true })}\r\n                    placeholder='Avatar'\r\n                />\r\n                {errors.password && <span> {errors.password.message ? errors.password.message : 'Este campo es obligatorio'} </span>}\r\n                <input\r\n                    className='form-control'\r\n                    name='password'\r\n                    type='text'\r\n                    ref={register({ required: true })}\r\n                    placeholder='Contraseña'\r\n                />\r\n                <input\r\n                    type='checkbox'\r\n                    name='remember'\r\n                    ref={register}\r\n                />\r\n                {\r\n                    isLoading ?\r\n                        <button>Registrarse</button>\r\n                        :\r\n                        <p>Gracias por registrate</p>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import { LOGIN_SUCCESS, LOGIN_ERROR} from '../constants/index';\r\n\r\nexport default (state, action) => {\r\n\tswitch(action.type) {\r\n        case LOGIN_SUCCESS:\r\n  \r\n\t\t\tlocalStorage.setItem('token', action.payload.data.token);\r\n            localStorage.setItem('user', JSON.stringify(action.payload.data.user));\r\n        \r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoken: action.payload.token,\r\n                user: action.payload.user,\r\n\t\t\t\tloading: false\r\n            }\t\t\r\n\r\n\t\tcase LOGIN_ERROR:\r\n\t\t\tlocalStorage.removeItem('token');\r\n\t\t\tlocalStorage.removeItem('user');\r\n            \r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\ttoken: null,\r\n                    user: null,\r\n\t\t\t\t\tmessage: action.payload, \r\n                    loading: false\r\n\t\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n} \r\n\r\n    \r\n\r\n\r\n","export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useReducer } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\n\r\nimport {login} from '../api/apiCalls';\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nimport { LOGIN_SUCCESS, LOGIN_ERROR } from '../constants/index';\r\n\r\nexport const AuthState = props => {\r\n  const initialState = {\r\n    user: localStorage.getItem(\"user\"),\r\n    token: localStorage.getItem(\"token\"),\r\n    loading: true\r\n   }\r\n\r\n  const history = useHistory();\r\n  const [ state, dispatch ] = useReducer(AuthReducer, initialState);\r\n\r\n  const authenticate = (data) => {\r\n    login(data)\r\n      .then(res=> {\r\n       \r\n        dispatch({ type: LOGIN_SUCCESS, payload: res })\r\n        history.push(`/dashboard/${res.data.user.userId}`);\r\n        document.location.reload()\r\n      })\r\n      .catch(err => { \r\n        dispatch({ type: LOGIN_ERROR, payload: err }) \r\n      })\r\n  }\r\n\r\n  return(\r\n    <AuthContext.Provider\r\n      value={{ \r\n        token: state.token,\r\n        user: state.user,\r\n        loading: state.loading,\r\n        authenticate,\r\n  \r\n      }}\r\n    >\r\n    {props.children}\r\n    </AuthContext.Provider>\r\n  )\r\n}","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport AuthContext from '../auth/authContext';\r\n\r\nexport const AnonRoute = (props) => { \r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { component: Component, ...rest } = props; \r\n\r\n  return (\r\n    <>\r\n      {!authContext.token ? ( \r\n        <Route render={(props) => <Component {...props} />} {...rest} /> \r\n      ) : (\r\n        <Redirect to=\"/\" /> \r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nexport const PrivateRoute = props => {\r\n\r\n  \r\n  const { component: Component, ...rest } = props;\r\n  const token = localStorage.getItem('token');\r\n\r\n  return (\r\n    <>\r\n      { token ? (\r\n\r\n        <Route render={props => <Component {...props} />} {...rest} />\r\n      ) : (\r\n        <Redirect to=\"/\" /> \r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import {axiosInstance} from '../api/api';\r\n\r\nconst tokenAuth = token => {\r\n    if(token) {\r\n        axiosInstance.defaults.headers.common['Authorization'] =  token;\r\n    } else {\r\n        delete axiosInstance.defaults.headers.common['Authorization'] \r\n    }\r\n}\r\n\r\nexport default tokenAuth;","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserTasks, editTask } from '../api/apiCalls';\r\nimport { Link } from 'react-router-dom'\r\nimport Moment from 'react-moment';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst AllTasks = (props) => {\r\n\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n    const [activeItem, setActiveItem] = useState('');\r\n    const [error, setError] = useState('')\r\n    const [infoSent, setInfoSent] = useState(false);\r\n    // const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    // const categoryMap = category.map(category => category);\r\n    // const handleCategory = () => { setCategory(categoryMap) }\r\n    const [handler, setHandler] = useState(false);\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTrueOrFalse = () => setHandler(!handler);\r\n\r\n    const showModal = (task) => {\r\n        setIsOpen(true);\r\n        setActiveItem(task)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserTasks(props.match.params.userId);\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n\r\n    const EditProfile = async (data) => {\r\n        try {\r\n            await editTask(props.match.params.userId, activeItem._id, data)\r\n            setInfoSent(!infoSent)\r\n            document.location.reload()\r\n        } catch (error) {\r\n            setError('Lo sentimos, No se puede actualizar esta tarea')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n            <div className='div-tasks'>\r\n                <div className='d-flex justify-content-between mb-3'>\r\n                    <span className='tasks-headers'>MIS TAREAS</span>\r\n                    <span className='tasks-headers'>FECHA DE CREACIÓN</span>\r\n                </div>\r\n                {\r\n\r\n                    userTasks.map((task, index) => {\r\n\r\n                        return (\r\n                            <div key={index} className='d-flex justify-content-between'>\r\n                                <div className='task-name p-2' onClick={() => showModal(task)} > {\r\n                                    task.completed ?\r\n                                        <del>\r\n\r\n                                            <span className=\r\n                                                {\r\n                                                    task.completed === false ?\r\n                                                        'text-danger' :\r\n                                                        task.completed === true ?\r\n                                                            'text-success' :\r\n                                                            (task.category === 'Trabajo' || task.category === 'Supermercado') && task.important === true && task.completed === false ?\r\n                                                                'text-info' :\r\n                                                                task.category && !task.important === true && task.completed === false === 'Supermercado' ?\r\n                                                                    'text-dark' :\r\n                                                                    null\r\n                                                }>\r\n                                                {task.name}\r\n                                            </span>\r\n                                        </del>\r\n                                        :\r\n                                        <span className=\r\n                                            {\r\n                                                task.completed === false ?\r\n                                                    'text-danger' :\r\n                                                    task.completed === true ?\r\n                                                        'text-success' :\r\n                                                        (task.category === 'Trabajo' || task.category === 'Supermercado') && !task.important === true ?\r\n                                                            'text-info' :\r\n                                                            task.category && !task.importantes === 'Supermercado' ?\r\n                                                                'text-dark' :\r\n                                                                null\r\n                                            }>\r\n                                            {task.name}\r\n                                        </span>\r\n                                }\r\n                                    <span className={\r\n                                        task.completed === false ?\r\n                                            'text-danger taskBall-1' :\r\n                                            task.completed === true ?\r\n                                                'text-success taskBall-1' :\r\n                                                (task.category === 'Trabajo' || task.category === 'Supermercado' || task.category === 'Otros') && !task.important === true ?\r\n                                                    'text-warning taskBall-1' :\r\n                                                    task.category && !task.importantes === 'Supermercado' ?\r\n                                                        'text-dark taskBall-1' :\r\n                                                        null\r\n                                    }>\r\n                                        {<i className=\"fas fa-circle ball-state\"></i>}\r\n                                    </span>\r\n                                    \r\n                                    <span className={\r\n                                        task.important ?\r\n                                        'text-warning' :\r\n                                        'text-dark'\r\n                                    }>\r\n                                    {<i className=\"fas fa-circle ball-state\"></i>}\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    <span className='date'><Moment format=\"D MMM YYYY\">{task.createdAt}</Moment></span>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <div className='vertical-lign'></div>\r\n            </div>\r\n            {\r\n                activeItem ?\r\n                    <Modal show={isOpen} onHide={hideModal}>\r\n                        <Modal.Body>\r\n                            <form onSubmit={handleSubmit(EditProfile)}>\r\n                                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                                <span>{error}</span>\r\n                                <label>Nombre</label>\r\n                                <input\r\n                                    defaultValue={activeItem.name}\r\n                                    className='form-control'\r\n                                    name='name'\r\n                                    type='text'\r\n                                    placeholder='Nombre'\r\n                                    ref={register}\r\n                                />\r\n                                {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                                <div>\r\n                                    <label>\r\n                                        Categoría\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            name='category'\r\n                                            defaultValue={activeItem.category}\r\n                                            ref={register}\r\n                                        />\r\n                                        {/* <select\r\n                                            name='category'\r\n                                            className='form-control'\r\n                                            ref={register({required:true})}\r\n                                            onChange={e => handleCategory(e)}\r\n                                        >\r\n                                            {\r\n                                                categoryMap.map((doc, key) => {\r\n                                                    return <option key={key} value={doc}>{doc}</option>;\r\n                                                })\r\n\r\n                                            }\r\n                                        </select> */}\r\n                                    </label>\r\n                                </div>\r\n                                {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                                <label>Descripción</label>\r\n                                <input\r\n                                    className='form-control'\r\n                                    name='description'\r\n                                    type='text'\r\n                                    ref={register}\r\n                                    placeholder='Descripción'\r\n                                    defaultValue={activeItem.description}\r\n                                />\r\n\r\n\r\n                                <div className=\"switch-button\">\r\n                                    <label>Estado de la tarea</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label\" name=\"completed\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                <div className=\"switch-button\">\r\n                                    <label>Marcar como importante</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label-2\" name=\"important\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label-2\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                {\r\n                                infoSent \r\n                                ?\r\n                                    <p>¡Tarea Actualizada!</p>\r\n                                :\r\n                                    <button>Actualizar</button>\r\n                                }\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllTasks","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserTasks, editTask } from '../api/apiCalls';\r\nimport { Link } from 'react-router-dom'\r\nimport Moment from 'react-moment';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst PendingTasks = (props) => {\r\n\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n    const [activeItem, setActiveItem] = useState('');\r\n    const [error, setError] = useState('')\r\n    const [infoSent, setInfoSent] = useState(false);\r\n    // const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    // const categoryMap = category.map(category => category);\r\n    // const handleCategory = () => { setCategory(categoryMap) }\r\n    const [, setHandler] = useState(activeItem);\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTrueOrFalse = () => setHandler(!activeItem);\r\n\r\n    const showModal = (task) => {\r\n        setIsOpen(true);\r\n        setActiveItem(task)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserTasks(props.match.params.userId);\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n\r\n    const EditProfile = async (data) => {\r\n        try {\r\n            await editTask(props.match.params.userId, activeItem._id, data)\r\n            setInfoSent(!infoSent)\r\n            document.location.reload()\r\n        } catch (error) {\r\n            setError('Lo sentimos, No se puede actualizar esta tarea')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n            <div className='div-tasks'>\r\n                <div className='d-flex justify-content-between mb-3'>\r\n                    <span className='tasks-headers'>TAREAS <br/>PENDIENTES</span>\r\n                    <span className='tasks-headers'>FECHA DE CREACIÓN</span>\r\n                </div>\r\n                {\r\n\r\n                    userTasks.map((task, index) => {\r\n\r\n                        return (\r\n                            <div key={index} className='d-flex justify-content-between'>\r\n\r\n                                {\r\n                                    !task.completed ?\r\n\r\n                                        <>\r\n                                            <div className='task-name p-2' onClick={() => showModal(task)} >\r\n\r\n                                                <span className=\r\n                                                    {\r\n                                                        !task.completed ?\r\n                                                            'text-danger'\r\n                                                            :\r\n                                                            null\r\n                                                    }>\r\n                                                    {task.name}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    !task.completed ?\r\n                                                        'text-danger taskBall-1' :\r\n                                                        (task.category === 'Trabajo' || task.category === 'Supermercado' || task.category === 'Otros') && !task.important === true ?\r\n                                                            'text-warning taskBall-1' :\r\n                                                            task.category && !task.importantes === 'Supermercado' ?\r\n                                                                'text-dark taskBall-1' :\r\n                                                                null\r\n                                                }>\r\n                                                    {!task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    task.important ?\r\n                                                        'text-warning' :\r\n                                                        'text-dark'\r\n                                                }>\r\n                                                    {!task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className='date'><Moment format=\"D MMM YYYY\">{task.createdAt}</Moment></span>\r\n                                            </div>\r\n                                        </>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <div className='vertical-lign'></div>\r\n            </div>\r\n            {\r\n                activeItem ?\r\n                    <Modal show={isOpen} onHide={hideModal}>\r\n                        <Modal.Body>\r\n                            <form onSubmit={handleSubmit(EditProfile)}>\r\n                                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                                <span>{error}</span>\r\n                                <label>Nombre</label>\r\n                                <input\r\n                                    defaultValue={activeItem.name}\r\n                                    className='form-control'\r\n                                    name='name'\r\n                                    type='text'\r\n                                    placeholder='Nombre'\r\n                                    ref={register}\r\n                                />\r\n                                {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                                <div>\r\n                                    <label>\r\n                                        Categoría\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            name='category'\r\n                                            defaultValue={activeItem.category}\r\n                                            ref={register}\r\n                                        />\r\n                                        {/* <select\r\n                                            name='category'\r\n                                            className='form-control'\r\n                                            ref={register({required:true})}\r\n                                            onChange={e => handleCategory(e)}\r\n                                        >\r\n                                            {\r\n                                                categoryMap.map((doc, key) => {\r\n                                                    return <option key={key} value={doc}>{doc}</option>;\r\n                                                })\r\n\r\n                                            }\r\n                                        </select> */}\r\n                                    </label>\r\n                                </div>\r\n                                {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                                <label>Descripción</label>\r\n                                <input\r\n                                    className='form-control'\r\n                                    name='description'\r\n                                    type='text'\r\n                                    ref={register}\r\n                                    placeholder='Descripción'\r\n                                    defaultValue={activeItem.description}\r\n                                />\r\n\r\n\r\n                                <div className=\"switch-button\">\r\n                                    <label>Estado de la tarea</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label\" name=\"completed\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                <div className=\"switch-button\">\r\n                                    <label>Marcar como importante</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label-2\" name=\"important\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label-2\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                {\r\n                                    infoSent\r\n                                        ?\r\n                                        <p>¡Tarea Actualizada!</p>\r\n                                        :\r\n                                        <button>Actualizar</button>\r\n                                }\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PendingTasks","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserTasks, editTask } from '../api/apiCalls';\r\nimport { Link } from 'react-router-dom'\r\nimport Moment from 'react-moment';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst CompletedTasks = (props) => {\r\n\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n    const [activeItem, setActiveItem] = useState('');\r\n    const [error, setError] = useState('')\r\n    const [infoSent, setInfoSent] = useState(false);\r\n    // const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    // const categoryMap = category.map(category => category);\r\n    // const handleCategory = () => { setCategory(categoryMap) }\r\n    const [handler, setHandler] = useState(false);\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTrueOrFalse = () => setHandler(!handler);\r\n\r\n    const showModal = (task) => {\r\n        setIsOpen(true);\r\n        setActiveItem(task)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserTasks(props.match.params.userId);\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n\r\n    const EditProfile = async (data) => {\r\n        try {\r\n            await editTask(props.match.params.userId, activeItem._id, data)\r\n            setInfoSent(!infoSent)\r\n            document.location.reload()\r\n        } catch (error) {\r\n            setError('Lo sentimos, No se puede actualizar esta tarea')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n            <div className='div-tasks'>\r\n                <div className='d-flex justify-content-between mb-3'>\r\n                    <span className='tasks-headers'>TAREAS COMPLETADAS</span>\r\n                    <span className='tasks-headers'>FECHA DE CREACIÓN</span>\r\n                </div>\r\n                {\r\n\r\n                    userTasks.map((task, index) => {\r\n\r\n                        return (\r\n                            <div key={index} className='d-flex justify-content-between'>\r\n\r\n                                {\r\n                                    task.completed ?\r\n\r\n                                        <>\r\n                                            <div className='task-name p-2' onClick={() => showModal(task)} >\r\n\r\n                                                <span className=\r\n                                                    {\r\n                                                        task.completed ?\r\n                                                            'text-success'\r\n                                                            :\r\n                                                            null\r\n                                                    }>\r\n                                                    <del>{task.name}</del>\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    task.completed ?\r\n                                                        'text-success taskBall-1' :\r\n                                                        (task.category === 'Trabajo' || task.category === 'Supermercado' || task.category === 'Otros') && !task.important === true ?\r\n                                                            'text-warning taskBall-1' :\r\n                                                            task.category && !task.importantes === 'Supermercado' ?\r\n                                                                'text-dark taskBall-1' :\r\n                                                                null\r\n                                                }>\r\n                                                    {task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    task.important ?\r\n                                                        'text-warning' :\r\n                                                        'text-dark'\r\n                                                }>\r\n                                                    {task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className='date'><Moment format=\"D MMM YYYY\">{task.createdAt}</Moment></span>\r\n                                            </div>\r\n                                        </>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <div className='vertical-lign'></div>\r\n            </div>\r\n            {\r\n                activeItem ?\r\n                    <Modal show={isOpen} onHide={hideModal}>\r\n                        <Modal.Body>\r\n                            <form onSubmit={handleSubmit(EditProfile)}>\r\n                                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                                <span>{error}</span>\r\n                                <label>Nombre</label>\r\n                                <input\r\n                                    defaultValue={activeItem.name}\r\n                                    className='form-control'\r\n                                    name='name'\r\n                                    type='text'\r\n                                    placeholder='Nombre'\r\n                                    ref={register}\r\n                                />\r\n                                {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                                <div>\r\n                                    <label>\r\n                                        Categoría\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            name='category'\r\n                                            defaultValue={activeItem.category}\r\n                                            ref={register}\r\n                                        />\r\n                                        {/* <select\r\n                                            name='category'\r\n                                            className='form-control'\r\n                                            ref={register({required:true})}\r\n                                            onChange={e => handleCategory(e)}\r\n                                        >\r\n                                            {\r\n                                                categoryMap.map((doc, key) => {\r\n                                                    return <option key={key} value={doc}>{doc}</option>;\r\n                                                })\r\n\r\n                                            }\r\n                                        </select> */}\r\n                                    </label>\r\n                                </div>\r\n                                {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                                <label>Descripción</label>\r\n                                <input\r\n                                    className='form-control'\r\n                                    name='description'\r\n                                    type='text'\r\n                                    ref={register}\r\n                                    placeholder='Descripción'\r\n                                    defaultValue={activeItem.description}\r\n                                />\r\n\r\n\r\n                                <div className=\"switch-button\">\r\n                                    <label>Estado de la tarea</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label\" name=\"completed\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                <div className=\"switch-button\">\r\n                                    <label>Marcar como importante</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label-2\" name=\"important\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label-2\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                {\r\n                                    infoSent\r\n                                        ?\r\n                                        <p>¡Tarea Actualizada!</p>\r\n                                        :\r\n                                        <button>Actualizar</button>\r\n                                }\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompletedTasks","import React from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { Redirect  } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n\r\n   \r\n    const user= JSON.parse(localStorage.getItem('user'))\r\n\r\n\r\n    const handleClickLogout = () => {\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n        document.location.reload()\r\n        return <Redirect to={'/'} />\r\n\r\n    }\r\n\r\n    return (\r\n        <div data-test='app-component'>\r\n            <button className='btn-logout d-block ml-auto mb-4 mr-2 mt-2' onClick={handleClickLogout}>[ Cerrar Sesión ]</button>\r\n            <div>\r\n                <img className='logo' src='/list-2389219_640-removebg-preview.png' alt='pic' data-test='image-logo' />\r\n                <h2 className='h2-name'>Hola {user.nickName}</h2>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React, { useState } from 'react';\r\nimport '../CSS/slideMenu.css';\r\nimport { slide as Menu } from \"react-burger-menu\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SideBar = (props) => {\r\n\r\n    const [menuOpen, setMenuOpen] = useState(true);\r\n    const user = JSON.parse(localStorage.getItem('user'))\r\n\r\n\r\n\r\n    const handleStateChange = (state) => {\r\n        setMenuOpen(state.isOpen)\r\n    }\r\n    const closeMenuHandler = () => {\r\n        setMenuOpen(!menuOpen)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Menu onStateChange={(state) => handleStateChange(state)} className='userMenu' isOpen={menuOpen} disableCloseOnEsc disableAutoFocus customBurgerIcon={<span className='btn-categories'>CATEGORÍAS</span>} >\r\n\r\n                <Link onClickCapture={closeMenuHandler} className=\"menu-item  bm-item btn-handler\" to={`/dashboard/${user.userId}`}>\r\n                    INICIO\r\n                </Link>\r\n\r\n                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler\" to={`/${user.userId}/alltasks`}>\r\n                    MIS TAREAS\r\n                </Link>\r\n\r\n                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-danger font-weight-bold\" to={`/${user.userId}/pendingTasks`}>\r\n                    PENDIENTES\r\n                </Link>\r\n\r\n                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-success font-weight-bold\" to={`/${user.userId}/completedTasks`}>\r\n                    COMPLETADAS\r\n                </Link>\r\n                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-warning font-weight-bold\" to={`/${user.userId}/importantTasks`}>\r\n                    IMPORTANTES\r\n                </Link>\r\n                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-light font-weight-bold\" to={`/${user.userId}/completedTasks`}>\r\n                    TRABAJO\r\n                </Link>\r\n                <Link onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler text-light font-weight-bold\" to={`/${user.userId}/completedTasks`}>\r\n                    SUPERMERCADO\r\n                </Link>\r\n\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\nexport default SideBar","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserTasks, editTask } from '../api/apiCalls';\r\nimport { Link } from 'react-router-dom'\r\nimport Moment from 'react-moment';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst ImportantTasks = (props) => {\r\n\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n    const [activeItem, setActiveItem] = useState('');\r\n    const [error, setError] = useState('')\r\n    const [infoSent, setInfoSent] = useState(false);\r\n    // const [category, setCategory] = useState(['Seleccionar', 'SuperMercado', 'Trabajo', 'Otros']);\r\n    // const categoryMap = category.map(category => category);\r\n    // const handleCategory = () => { setCategory(categoryMap) }\r\n    const [handler, setHandler] = useState(false);\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTrueOrFalse = () => setHandler(!handler);\r\n\r\n    const showModal = (task) => {\r\n        setIsOpen(true);\r\n        setActiveItem(task)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserTasks(props.match.params.userId);\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n\r\n    const EditProfile = async (data) => {\r\n        try {\r\n            await editTask(props.match.params.userId, activeItem._id, data)\r\n            setInfoSent(!infoSent)\r\n            document.location.reload()\r\n        } catch (error) {\r\n            setError('Lo sentimos, No se puede actualizar esta tarea')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n            <div className='div-tasks'>\r\n                <div className='d-flex justify-content-between mb-3'>\r\n                    <span className='tasks-headers'>TAREAS IMPORTANTES</span>\r\n                    <span className='tasks-headers'>FECHA DE CREACIÓN</span>\r\n                </div>\r\n                {\r\n\r\n                    userTasks.map((task, index) => {\r\n\r\n                        return (\r\n                            <div key={index} className='d-flex justify-content-between'>\r\n\r\n                                {\r\n                                    task.important && !task.completed ?\r\n\r\n                                        <>\r\n                                            <div className='task-name p-2' onClick={() => showModal(task)} >\r\n\r\n                                                <span className=\r\n                                                    {\r\n                                                        task.important && !task.completed?\r\n                                                            'text-warning'\r\n                                                            :\r\n                                                            null\r\n                                                    }>\r\n                                                    {task.name}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                             !task.completed ?\r\n                                                                'text-danger taskBall-1' :\r\n                                                                null\r\n                                                }>\r\n                                                    {task.important && !task.completed ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n\r\n                                                <span className={\r\n                                                    task.important ?\r\n                                                        'text-warning' :\r\n                                                        'text-dark'\r\n                                                }>\r\n                                                    {task.important ? <i className=\"fas fa-circle ball-state\"></i> : null}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className='date'><Moment format=\"D MMM YYYY\">{task.createdAt}</Moment></span>\r\n                                            </div>\r\n                                        </>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <div className='vertical-lign'></div>\r\n            </div>\r\n            {\r\n                activeItem ?\r\n                    <Modal show={isOpen} onHide={hideModal}>\r\n                        <Modal.Body>\r\n                            <form onSubmit={handleSubmit(EditProfile)}>\r\n                                {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                                <span>{error}</span>\r\n                                <label>Nombre</label>\r\n                                <input\r\n                                    defaultValue={activeItem.name}\r\n                                    className='form-control'\r\n                                    name='name'\r\n                                    type='text'\r\n                                    placeholder='Nombre'\r\n                                    ref={register}\r\n                                />\r\n                                {errors.category && <span> {errors.category.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n\r\n                                <div>\r\n                                    <label>\r\n                                        Categoría\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            name='category'\r\n                                            defaultValue={activeItem.category}\r\n                                            ref={register}\r\n                                        />\r\n                                        {/* <select\r\n                                            name='category'\r\n                                            className='form-control'\r\n                                            ref={register({required:true})}\r\n                                            onChange={e => handleCategory(e)}\r\n                                        >\r\n                                            {\r\n                                                categoryMap.map((doc, key) => {\r\n                                                    return <option key={key} value={doc}>{doc}</option>;\r\n                                                })\r\n\r\n                                            }\r\n                                        </select> */}\r\n                                    </label>\r\n                                </div>\r\n                                {errors.description && <span> {errors.description.message ? errors.description.message : 'Este campo es obligatorio'} </span>}\r\n                                <label>Descripción</label>\r\n                                <input\r\n                                    className='form-control'\r\n                                    name='description'\r\n                                    type='text'\r\n                                    ref={register}\r\n                                    placeholder='Descripción'\r\n                                    defaultValue={activeItem.description}\r\n                                />\r\n\r\n\r\n                                <div className=\"switch-button\">\r\n                                    <label>Estado de la tarea</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label\" name=\"completed\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                <div className=\"switch-button\">\r\n                                    <label>Marcar como importante</label>\r\n                                    <input className=\"switch-button__checkbox\" type=\"checkbox\" id=\"switch-label-2\" name=\"important\" onClick={handleTrueOrFalse} ref={register} />\r\n                                    <label htmlFor=\"switch-label-2\" className=\"switch-button__label\"></label>\r\n                                </div>\r\n                                {\r\n                                    infoSent\r\n                                        ?\r\n                                        <p>¡Tarea Actualizada!</p>\r\n                                        :\r\n                                        <button>Actualizar</button>\r\n                                }\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImportantTasks","import React from \"react\";\r\nimport { NewTask } from '../Components/NewTask';\r\nimport Dashboard from '../Components/Dashboard';\r\nimport { Home } from '../Components/Home';\r\nimport { Login } from '../Components/Login';\r\nimport { Signup } from '../Components/Signup';\r\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport { AuthState } from \"../auth/authState\";\r\nimport { AnonRoute } from \"./AnonRoute\";\r\nimport { PrivateRoute } from \"./PrivateRoute\";\r\nimport tokenAuth from '../config/token';\r\nimport AllTasks from \"../Components/AllTasks\";\r\nimport PendingTasks from \"../Components/PendingTasks\";\r\nimport CompletedTasks from \"../Components/CompletedTasks\";\r\nimport Nav from '../Components/Nav'\r\nimport SideBar from '../Components/SideBar';\r\nimport ImportantTasks from \"../Components/ImportantTasks\";\r\n\r\nexport function BrowserRoutes() {\r\n    const token = localStorage.getItem('token');\r\n    if (token) tokenAuth(token)\r\n\r\n    return (\r\n        <Router>\r\n            <AuthState>\r\n                <div className='flex-container'>\r\n                    {\r\n                        token ? <Nav /> : null\r\n                    }\r\n                    <div>\r\n\r\n                        {\r\n                            token ? <SideBar /> : null\r\n                        }\r\n                        <div>\r\n\r\n                            <Switch>\r\n                                <AnonRoute path=\"/\" exact component={Home} />\r\n                                <AnonRoute path=\"/signup\" component={Signup} />\r\n                                <AnonRoute path=\"/login\" component={Login} />\r\n                                <PrivateRoute path=\"/dashboard/:userId\" component={Dashboard} />\r\n                                <PrivateRoute path='/create-task/:userId' component={NewTask} />\r\n                                <PrivateRoute path='/:userId/alltasks' component={AllTasks} />\r\n                                <PrivateRoute path='/:userId/pendingTasks' component={PendingTasks} />\r\n                                <PrivateRoute path='/:userId/completedTasks' component={CompletedTasks} />\r\n                                <PrivateRoute path='/:userId/importantTasks' component={ImportantTasks}/>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </AuthState>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default BrowserRoutes;\r\n\r\n","import React from 'react';\r\nimport { BrowserRoutes } from './Routes/BrowserRoutes';\r\nimport './CSS/home.css'\r\n\r\nexport const App = () => {\r\n\r\n  return (\r\n   <BrowserRoutes/>\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}