{"version":3,"sources":["Components/SideBar.js","Components/NewTask.js","api/api.js","api/apiCalls.js","Components/Dashboard.js","Components/Home.js","auth/authContext.js","Components/Login.js","Components/Signup.js","auth/authReducer.js","constants/index.js","auth/authState.js","Routes/AnonRoute.jsx","Routes/PrivateRoute.jsx","config/token.js","Routes/BrowserRoutes.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["SideBar","history","useHistory","useState","menuOpen","setMenuOpen","user","JSON","parse","localStorage","getItem","closeMenuHandler","onStateChange","state","isOpen","handleStateChange","className","disableCloseOnEsc","disableAutoFocus","customBurgerIcon","onClick","push","userId","document","location","reload","onClickCapture","NewTask","axiosInstance","axios","create","baseURL","process","signup","data","post","Dashboard","props","setData","userTasks","setUserTasks","useEffect","a","match","params","get","result","tasks","getDashboard","data-test","to","map","task","index","key","name","Home","currentUserId","authContext","createContext","Login","useForm","register","handleSubmit","authenticate","useContext","AuthContext","onSubmit","type","placeholder","ref","required","Signup","errors","isLoading","setisLoading","error","setError","message","nickName","password","action","setItem","payload","token","stringify","loading","removeItem","AuthState","initialState","useReducer","AuthReducer","dispatch","Provider","value","login","then","res","catch","err","children","AnonRoute","Component","component","rest","render","PrivateRoute","tokenAuth","defaults","headers","common","BrowserRoutes","path","exact","Nav","src","alt","App","renderSideBar","setRenderSideBar","style","display","flexDirection","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","StrictMode","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8579f521.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../CSS/slideMenu.css';\r\nimport { slide as Menu } from \"react-burger-menu\";\r\nimport { useHistory  } from \"react-router-dom\";\r\n\r\nconst SideBar = () => {\r\n    const history = useHistory()\r\n    const [menuOpen, setMenuOpen] = useState(true);\r\n    const user = JSON.parse(localStorage.getItem('user'))\r\n    \r\n\r\n\r\n    const handleStateChange = (state) => {\r\n        setMenuOpen(state.isOpen)\r\n      }\r\n    const closeMenuHandler = () => {\r\n        setMenuOpen(!menuOpen)\r\n    }\r\n\r\n    const handleHome = () => {\r\n        history.push(`/dashboard/${user.userId}`);\r\n        document.location.reload();\r\n    }\r\n    return (\r\n        <div>\r\n            <Menu onStateChange={(state) => handleStateChange(state)} className='userMenu' isOpen={menuOpen} disableCloseOnEsc disableAutoFocus customBurgerIcon={<span className='btn-categories'>CATEGOR√çAS</span>} >\r\n                \r\n                <button onClick = {handleHome} onClickCapture={closeMenuHandler} className=\"menu-item  bm-item btn-handler\">\r\n                    INICIO\r\n                </button>\r\n            \r\n                <button onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler\">\r\n                    PENDIENTES\r\n                </button>\r\n                <button onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler\">\r\n                    COMPLETADAS\r\n                        </button>\r\n                <button onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler\">\r\n                    SUPERMERCADO\r\n                        </button>\r\n                <button onClick={closeMenuHandler} className=\"menu-item  bm-item btn-handler\">\r\n                    IMPORTANTES\r\n                        </button>\r\n\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\nexport default SideBar","import React from 'react'\r\n\r\n\r\nexport const NewTask = () => {\r\n    return (\r\n        <div>\r\n            <h3>Create new task</h3>\r\n    \r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\r\n\r\nexport const axiosInstance = axios.create({\r\n\tbaseURL:`${process.env.REACT_APP_API_URI}`,\r\n\r\n});\r\n\r\n// axiosInstance.interceptors.response.use(response => {\r\n\r\n// \treturn response.data;\r\n// }, error => {\r\n// \treturn Promise.reject(error);\r\n// });","import {axiosInstance} from './api'\r\n\r\n//userCalls\r\n\r\nexport const signup = (data) => {\r\n    return axiosInstance.post('/signup', data);\r\n};\r\n\r\nexport const login = (data) => {\r\n    return axiosInstance.post('/login', data);\r\n};\r\n\r\nexport const getDashboard = (userId, token) => {\r\n    return axiosInstance.get(`/dashboard/${userId}`, { headers: { Authorization: token }});\r\n};\r\n\r\nexport const getUserData = (userId) => {\r\n    return axiosInstance.get(`/userinfo/${userId}`)\r\n}\r\n\r\n//TaskCalls\r\n\r\nexport const createTask = (id, data) => {\r\n    return axiosInstance.post(`/create-task/${id}`, data);\r\n};\r\n\r\nexport const deleteTask = (userId, taskId, data) => {\r\n    return axiosInstance.post(`/delete-task/${userId}/${taskId}`, data);\r\n};\r\n\r\nexport const editTask = (userId, taskId, data) => {\r\n    return axiosInstance.post(`/edit-task/${userId}/${taskId}`, data)\r\n}","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { getUserData } from '../api/apiCalls'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst Dashboard = ( props ) => {\r\n\r\n\r\n    const [, setData] = useState('')\r\n    const [userTasks, setUserTasks] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        const getDashboard = async () => {\r\n            const result = await getUserData(props.match.params.userId);\r\n\r\n            setData(result.data);\r\n            setUserTasks(result.data.tasks)\r\n        };\r\n\r\n        getDashboard()\r\n    }, [props.match.params.userId]);\r\n\r\n\r\n    return (\r\n        <div className='bg-component' data-test='app-component'>\r\n            <Link to={`/create-task/${props.match.params.userId}`}><button className='btn-create-task'> + NUEVA TAREA</button></Link>\r\n            <div className='div-tasks'> {\r\n                userTasks.map((task, index) => {\r\n                    return (\r\n                        <div key={index}>\r\n                            <p>{task.name}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            </div>\r\n      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard","import React from 'react'\r\nimport '../CSS/home.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport const Home = () => {\r\n    \r\n\r\n    let user = localStorage.getItem('user');\r\n    let currentUserId;\r\n\r\n    if (user !== null) {\r\n      currentUserId = JSON.parse(user)\r\n      \r\n    }\r\n\r\n    return (\r\n        <div className='background-home'>\r\n        <Link to='/signup' ><button>Registrarse</button></Link>\r\n            <>\r\n        {\r\n            user ?\r\n\r\n        <Link to={`/dashboard/${currentUserId.userId}`} ><button>Ir a mi escritorio</button> </Link>\r\n        \r\n        :\r\n        <Link to='/login' ><button>Iniciar Sesi√≥n</button> </Link>\r\n        \r\n        }\r\n        </>\r\n\r\n        </div>\r\n    )\r\n}\r\n","  \r\nimport { createContext } from 'react';\r\n\r\nconst authContext = createContext();\r\n\r\nexport default authContext;","import React, { useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport AuthContext from '../auth/authContext';\r\n\r\nexport const Login = () => {\r\n\r\n    const { register, handleSubmit } = useForm();\r\n    const authContext = useContext(AuthContext);\r\n    const { authenticate } = authContext;\r\n    // const [isLoading, setisLoading] = useState(true)\r\n    // const [error, setError] = useState(false)\r\n\r\n    const onSubmit =  data => {\r\n         authenticate(data)  \r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <input\r\n                    name='nickName'\r\n                    type='text'\r\n                    placeholder='NickName'\r\n                    ref={register({required :true})}\r\n                />\r\n                   <input\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='password'\r\n                    ref={register({required :true})}\r\n                />\r\n                   <input\r\n                   type='checkbox'\r\n                    name='remember'\r\n                    ref={register}    \r\n                />\r\n            <button>Acceder en mi cuenta</button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {signup} from '../api/apiCalls';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Signup = () => {\r\n    const history = useHistory();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [isLoading, setisLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    \r\n    const onSubmit = async data => {\r\n        try {\r\n          await signup(data);\r\n            setisLoading(false);\r\n            history.push('/login')\r\n\r\n        } catch (error) {\r\n            setError('ya existe un usuario con ese avatar')\r\n        }\r\n    };\r\n\r\n    \r\n    return (\r\n        <div>\r\n                 <form onSubmit={handleSubmit(onSubmit)}>\r\n                 {errors.name && <span> {errors.name.message ? errors.name.message : 'Este campo es obligatorio'} </span>}\r\n                <span>{error}</span>\r\n                 <input\r\n                    name='name'\r\n                    type='text'\r\n                    placeholder='Nombre'\r\n                    ref={register({required:true})}\r\n                />\r\n                  {errors.nickName && <span> {errors.nickName.message ? errors.nickName.message : 'Este campo es obligatorio'} </span>}\r\n                <input\r\n                    name='nickName'\r\n                    type='text'\r\n                    ref={register({required:true})}\r\n                    placeholder='Avatar'\r\n                />\r\n                  {errors.password && <span> {errors.password.message ? errors.password.message : 'Este campo es obligatorio'} </span>}\r\n                   <input\r\n                    name='password'\r\n                    type='text'\r\n                    ref={register({required:true})}\r\n                    placeholder='Contrase√±a'\r\n                />\r\n                   <input\r\n                   type='checkbox'\r\n                    name='remember'\r\n                    ref={register}\r\n                />\r\n                {\r\n                    isLoading ?\r\n                <button>Registrarse</button>\r\n                :\r\n                <p>Gracias por registrate</p>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import { LOGIN_SUCCESS, LOGIN_ERROR} from '../constants/index';\r\n\r\nexport default (state, action) => {\r\n\tswitch(action.type) {\r\n        case LOGIN_SUCCESS:\r\n  \r\n\t\t\tlocalStorage.setItem('token', action.payload.data.token);\r\n            localStorage.setItem('user', JSON.stringify(action.payload.data.user));\r\n        \r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoken: action.payload.token,\r\n                user: action.payload.user,\r\n\t\t\t\tloading: false\r\n            }\t\t\r\n\r\n\t\tcase LOGIN_ERROR:\r\n\t\t\tlocalStorage.removeItem('token');\r\n\t\t\tlocalStorage.removeItem('user');\r\n            \r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\ttoken: null,\r\n                    user: null,\r\n\t\t\t\t\tmessage: action.payload, \r\n                    loading: false\r\n\t\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n} \r\n\r\n    \r\n\r\n\r\n","export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useReducer } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\n\r\nimport {login} from '../api/apiCalls';\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nimport { LOGIN_SUCCESS, LOGIN_ERROR } from '../constants/index';\r\n\r\nexport const AuthState = props => {\r\n  const initialState = {\r\n    user: localStorage.getItem(\"user\"),\r\n    token: localStorage.getItem(\"token\"),\r\n    loading: true\r\n   }\r\n\r\n  const history = useHistory();\r\n  const [ state, dispatch ] = useReducer(AuthReducer, initialState);\r\n\r\n  const authenticate = (data) => {\r\n    login(data)\r\n      .then(res=> {\r\n       \r\n        dispatch({ type: LOGIN_SUCCESS, payload: res })\r\n        history.push(`/dashboard/${res.data.user.userId}`);\r\n        document.location.reload()\r\n      })\r\n      .catch(err => { \r\n        dispatch({ type: LOGIN_ERROR, payload: err }) \r\n      })\r\n  }\r\n\r\n  return(\r\n    <AuthContext.Provider\r\n      value={{ \r\n        token: state.token,\r\n        user: state.user,\r\n        loading: state.loading,\r\n        authenticate,\r\n  \r\n      }}\r\n    >\r\n    {props.children}\r\n    </AuthContext.Provider>\r\n  )\r\n}","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport AuthContext from '../auth/authContext';\r\n\r\nexport const AnonRoute = (props) => { \r\n\r\n  const authContext = useContext(AuthContext);\r\n  const { component: Component, ...rest } = props; \r\n\r\n  return (\r\n    <>\r\n      {!authContext.token ? ( \r\n        <Route render={(props) => <Component {...props} />} {...rest} /> \r\n      ) : (\r\n        <Redirect to=\"/\" /> \r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nexport const PrivateRoute = props => {\r\n\r\n  \r\n  const { component: Component, ...rest } = props;\r\n  const token = localStorage.getItem('token');\r\n\r\n  return (\r\n    <>\r\n      { token ? (\r\n\r\n        <Route render={props => <Component {...props} />} {...rest} />\r\n      ) : (\r\n        <Redirect to=\"/\" /> \r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import {axiosInstance} from '../api/api';\r\n\r\nconst tokenAuth = token => {\r\n    if(token) {\r\n        axiosInstance.defaults.headers.common['Authorization'] =  token;\r\n    } else {\r\n        delete axiosInstance.defaults.headers.common['Authorization'] \r\n    }\r\n}\r\n\r\nexport default tokenAuth;","import React from \"react\";\r\nimport { NewTask } from '../Components/NewTask';\r\nimport Dashboard from '../Components/Dashboard';\r\nimport { Home } from '../Components/Home';\r\nimport { Login } from '../Components/Login';\r\nimport { Signup } from '../Components/Signup';\r\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport { AuthState } from \"../auth/authState\";\r\nimport { AnonRoute } from \"./AnonRoute\";\r\nimport { PrivateRoute } from \"./PrivateRoute\";\r\nimport tokenAuth from '../config/token';\r\n\r\n\r\nexport function BrowserRoutes(props) {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token) tokenAuth(token)\r\n\r\n    return (\r\n        <Router>\r\n            <AuthState>\r\n                <Switch>              \r\n                    <AnonRoute path=\"/\" exact component={Home} />\r\n                    <AnonRoute path=\"/signup\" component={Signup} />\r\n                    <AnonRoute path=\"/login\" component={Login} />\r\n                    <PrivateRoute path=\"/dashboard/:userId\" component={Dashboard} />\r\n                    <PrivateRoute path='/create-task/:userId' component={NewTask} />\r\n                </Switch>\r\n            </AuthState>\r\n        </Router>\r\n    )\r\n}\r\n\r\n\r\nexport default BrowserRoutes;\r\n\r\n\r\n\r\n\r\n\r\n// import SideBar from '../Components/SideBar'\r\n\r\n// const routes = [\r\n\r\n//     {\r\n//         path: \"/\",\r\n//         component: Home,\r\n//         exact: true,\r\n\r\n//     },\r\n\r\n//     {\r\n//         path: \"/login\",\r\n//         component: Login,\r\n//         exact: true,\r\n\r\n//     },\r\n//     {\r\n//         path: \"/signup\",\r\n//         component: Signup,\r\n//         exact: true,\r\n\r\n//     },\r\n//     {\r\n//         path: \"/dashboard/:userId\",\r\n//         component: Dashboard,\r\n//         exact: true,\r\n\r\n//     },\r\n//     {\r\n//         path: \"/create-task/:userId\",\r\n//         component: NewTask,\r\n//         exact: true,\r\n\r\n//     },\r\n// ];\r\n\r\n// export default routes","import React from 'react';\r\nimport '../CSS/dashboard.css'\r\nimport { Redirect  } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n\r\n   \r\n    const user= JSON.parse(localStorage.getItem('user'))\r\n\r\n\r\n    const handleClickLogout = () => {\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n        document.location.reload()\r\n        return <Redirect to={'/'} />\r\n\r\n    }\r\n\r\n    return (\r\n        <div data-test='app-component'>\r\n            <button className='btn-logout d-block ml-auto mb-4 mr-2 mt-2' onClick={handleClickLogout}>[ Cerrar Sesi√≥n ]</button>\r\n            <div>\r\n                <img className='logo' src='/list-2389219_640-removebg-preview.png' alt='pic' data-test='image-logo' />\r\n                <h2 className='h2-name'>Hola {user.nickName}</h2>\r\n                <p className='p-title-tasks'>Estas son tus √∫ltimas tareas.</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React, { useState, useEffect } from 'react';\r\nimport SideBar from './Components/SideBar';\r\nimport { BrowserRoutes } from './Routes/BrowserRoutes';\r\nimport Nav from './Components/Nav'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nexport const App = (props) => {\r\n  const [token] = useState(localStorage.getItem('token'));\r\n  const [renderSideBar, setRenderSideBar] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      setRenderSideBar(true)\r\n    }\r\n\r\n  }, [token, renderSideBar])\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <div style={{ display: \"flex\", flexDirection: 'column' }} >\r\n        {\r\n          token ? <Nav /> : null\r\n        }\r\n        <div >\r\n          {\r\n            token ? <SideBar /> : null\r\n          }\r\n          <div>\r\n            <BrowserRoutes />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}